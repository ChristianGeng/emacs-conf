#+title: README

* Purpose / General  Links

My adapation of https://github.com/chaoflow/.emacs.d

Original README:

Be prepared for rebases.

Better take a look at other sources for configuration files:

- [[-  https://github.com/redguardtoo/emacs.d/tree/master/lisp][https://github.com/redguardtoo/emacs.d/tree/master/lisp]]
- https://github.com/corecode/skel/tree/master/.emacs.d
- https://github.com/magnars/.emacs.d/
- https://github.com/cjohansen/.emacs.d
- https://github.com/technomancy/emacs-starter-kit from which I take inspiration or shamelessly copy.
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html#Top][Emacs Manual]]
- [[https://www.emacswiki.org/emacs/ImenuMode#toc3][imenu and icycles]]
- [[http://avilpage.com/2015/05/automatically-pep8-your-python-code.html][Emacs Mode Hook for autopep]]
- http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html#org67e2b1b
  -> moved https://github.com/seblemaguer/dotfiles
- https://github.com/daviwil/emacs-from-scratch - emacs from Scratch Series
- https://github.com/Schnouki
- https://github.com/tmtxt/.emacs.d/tree/master/config
- https://www.masteringemacs.org
- https://caiorss.github.io/Emacs-Elisp-Programming/Keybindings.html
- http://ergoemacs.org/emacs/emacs\_find\_replace.html
- https://github.com/enzuru/.emacs.d

* Languages / Modes


** C/C++
-  Cmake  IDE Package   https://github.com/atilaneves/cmake-ide
-  https://skebanga.github.io/cpp-dev-in-spacemacs/

** Org mode

-  http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html#org3c16bce
-  http://doc.norang.ca/org-mode.html
-  https://sachachua.com/blog/2013/08/emacs-how-i-organize-my-org-files/
-  https://orgmode.org/worg/org-hacks.html
-  https://en.wikipedia.org/wiki/Getting\_Things\_Done

*** Capturing

-  C-c c - Capturn

**** Links f체r Capturing Templates
     :PROPERTIES:
     :CUSTOM_ID: links-f체r-capturing-templates
     :END:

-  https://gist.github.com/prassee/1d0678ad1c86481176a39ccb4441c53b
-  https://gist.github.com/spacebat/097f3e7469edf2eaa6a9
-  https://www.reddit.com/r/emacs/comments/7zqc7b/share\_your\_org\_capture\_templates/
-  Die Org-Config von ist sehr m채chtig,
   https://github.com/sk8ingdom/.emacs.d/tree/master/. Diese habe ich
   assimiliert. Insbesondere die Capture-Templates sind ein sehr toller
   Ausgangspunkt. Der Hinweis ist auch aus dem Reddit-Post:
   https://www.reddit.com/r/emacs/comments/7zqc7b/share\_your\_org\_capture\_templates/

** Lisp
   :PROPERTIES:
   :CUSTOM_ID: lisp
   :END:

1. [[https://github.com/hypernumbers/learn_elisp_the_hard_way/tree/master/contents][Learn Emacs Lips the Hard Way]]
2. [[https://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html#sec-4-2][Emacs Lisp caiorss]]
3. [[https://www.cs.utexas.edu/~novak/schemevscl.html][Elisp versus Scheme Lisp keywords]]
4. [[file:Learn%20Elisp%20the%20hard%20way][https://github.com/hypernumbers/learn\_elisp\_the\_hard\_way/tree/master/contents]]

** Python
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:

- Elpy issues: https://github.com/jorgenschaefer/elpy/issues/842
[[https://avilpage.com/2015/05/automatically-pep8-your-python-code.html][- Anleitung f체r pep mode hook]]

*** LSP and Python

- [[https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/][https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/]]
- [[https://www.reddit.com/r/emacs/comments/4oyvcn/redbaron_for_emacs_refactor_your_python_method/][ed baron]]
- [[https://github.com/palantir/python-language-server][Palantir Python lsp server imple111mentation]]
- https://github.com/rememberYou/.emacs.d/blob/master/config.org#python
- add python from scratch link here
- https://www.youtube.com/watch?v=74zOY-vgkyw
- lsp languages https://emacs-lsp.github.io/lsp-mode/page/languages/
- https://github.com/seblemaguer/dotfiles -> has one too, no longer coli uni-saarland
- Medium Post on LSP: https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324



** Java IDE
   :PROPERTIES:
   :CUSTOM_ID: java-ide
   :END:

http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting\_up\_emacs\_for\_java\_development/
http://www.skybert.net/emacs/java/
https://github.com/skybert/my-little-friends/blob/master/emacs/.emacs.d/tkj-java-meghanada.el
https://github.com/skybert/my-little-friends/blob/master/emacs/.emacs.d/tkj-java-meghanada.el




** Web Development
   :PROPERTIES:
   :CUSTOM_ID: web-development
   :END:

Currently used Major Modes - mmm mode are two multi-mode enginges web
mode. I have mainly configured - vue-mode for vue framework files -
js2-mode for javascript

*** Important Minor Modes
    :PROPERTIES:
    :CUSTOM_ID: important-minor-modes
    :END:

**** emmet mode
     :PROPERTIES:
     :CUSTOM_ID: emmet-mode
     :END:

Completion for css, js, html. Abbreviations on homepage,

https://github.com/smihica/emmet-mode

C-j

**** Company-web
     :PROPERTIES:
     :CUSTOM_ID: company-web
     :END:

Company backend for web completion https://github.com/osv/company-web
configured in setup-web-mode.el and setup-auto-complete.el

M-x company-web-html

see this for language server alternative
https://emacs.stackexchange.com/questions/55230/help-setting-up-company-mode-autocompletion-of-html-css-files

*** Web Mode -> Major Mode for mainly Templates, html
    :PROPERTIES:
    :CUSTOM_ID: web-mode---major-mode-for-mainly-templates-html
    :END:

Flycheck use eslint:
http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html

C-c C-f web-mode-fold-or-unfold C-c C-e i web-mode-element-insert C-c
C-s insert snippets M-; comment out regions C-c C-w show whitespaces C-c
C-m mark region

Selection Expansion C-n marks current element

Tag Navigation:

Closing element : type '</' and it happens in html similarly for
templates

Type faster: emmet-mode: But web-mode has sth similar d/ -> creates div,
/s creates spna

*** Vue Mode
   :PROPERTIES:
   :CUSTOM_ID: vue-mode
   :END:

-  To be described - Using lsp is quite cool

*** Web Development further links:
   :PROPERTIES:
   :CUSTOM_ID: web-development-further-links
   :END:

-  https://github.com/jerryhsieh/Emacs-config
-  https://blog.onionstudio.com.tw/emacs-%E5%AF%AB-vue-js/
-  https://emacs-lsp.github.io/lsp-ui/





** LSP und DAP
   :PROPERTIES:
   :CUSTOM_ID: lsp-und-dap
   :END:

- Emacs LSP Main Page https://emacs-lsp.github.io/lsp-mode/
- Emacs from scratch Video https://www.youtube.com/watch?v=E-NAM9U5JYE
- https://emacs-lsp.github.io/lsp-mode/page/languages/
- Dap https://emacs-lsp.github.io/dap-mode/page/configuration/
- Emacs-LSP Discussions at gitter https://gitter.im/emacs-lsp/lsp-mode?at=5df680feac14cc652c8c0e22


* Other Topics

** Helm
   :PROPERTIES:
   :CUSTOM_ID: helm
   :END:

1. [[https://tuhdo.github.io/helm-intro.html][A Package in a league of
   its own]]
2. [[https://github.com/emacs-helm/helm/wiki][helm-wiki]]
3. [[http://thescratchcastle.com/posts/emacs-and-helm.html][bloc post]]
4. [[file:allows%20to%20edit%20occurrences%20in%20many%20files%20too][helm-swoop]]

** Fill column indication
  :PROPERTIES:
  :CUSTOM_ID: fill-column-indication
  :END:

-  start using fci-mode
-  (setq fci-rule-column 100)
** Code Navigation usig Etags

** Etags Navigation

[[https://www.coverfire.com/archives/2004/06/24/emacs-source-code-navigation/][etags primer]]

-  =find . -name '*.[ch]' | xargs etags=
-  M-. (that's Meta-Period) and type the name of the function
-  M-* to navigate to last point
-  Use helm to navigate to tags: M-x helm-etags-select
-  Use projectile-regenerate-tags to generate tags before.


** .dir-locals
   :PROPERTIES:
   :CUSTOM_ID: dir-locals
   :END:

#+BEGIN_EXAMPLE elisp
(
 (nil . (
         (projectile-project-test-cmd . "pytest --color=yes app/  --ignore app/tests/  --cov=app/study --cov=app/report  --cov=app/core")
         ;; (compilation-read-command . nil)
         (py-pythonpath . "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/")
         ;; (setq venv-dirlookup-names '(".projectile" ".venv" "pyenv" ".virtual"))
         ;; Automatically activating a virtualenv when using projectile
         ;; (setq projectile-switch-project-action 'venv-projectile-auto-workon)
         (eval . (progn
          (make-local-variable 'process-environment)
          (setq process-environment (copy-sequence process-environment))
          (setenv "PYTHONPATH" "/home/cgeng/code/app/:/home/cgeng/some_dir/")
          (setenv "WORKON_HOME" (expand-file-name "~/.venvs"))
          ))
         )
  )
 (python-mode . (
                 (pyvenv-activate . "~/.venvs/py37")
                 (lsp-pyright-venv-path . "~/.venvs/")
                 (subdirs . nil))
              )

)
#+END_EXAMPLE


*** Links

- https://emacs.stackexchange.com/questions/24907/how-to-use-dir-locals-el-with-projectile
- https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables
- https://emacs.stackexchange.com/questions/21955/calling-functions-in-dir-locals-in-emacs - cmake beispiele
- https://emacs.stackexchange.com/questions/61493/confused-regarding-dir-locals-el-and-projectile/61594#61594
- https://emacs.stackexchange.com/questions/63417/adding-directory-local-variable-for-projectile-test-command-is-not-working
- https://gist.github.com/sivakov512/99f288960475ca6c32c8c65483012c71 - uses .dir-locals to run python manage.py runserver

** Lern use-package and stream the configurations: https://github.com/jwiegley/use-package
