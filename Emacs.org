PROPERTIES:
:ID:       19b31c0e-fc4c-406c-be79-3742680f8601
:END:
#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-g.el :mkdirp yes

# M-x org-babel-tangle

* Eearly Init - not needed?

https://www.masteringemacs.org/article/whats-new-in-emacs-27-1

However, if your init file changes the values of

- package-load-list
- or 'package-user-dir', or sets
- package-enable-at-startup to nil then


- You can move that code to the early init file (see above), so those
  settings apply before Emacs tries to activate the packages.
- You can use the new 'package-quickstart' so activation of packages
  does not need to pay attention to 'package-load-list' or
  'package-user-dir' any more.



* Init File
:PROPERTIES:
:ID:       214b3d62-1d24-46f8-a373-e3a9e665602d
:END:

** Coding System
:PROPERTIES:
:ID:       97c85ba1-ae76-4450-99a5-3ba469d4e46d
:END:

#+begin_src emacs-lisp

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8)

#+end_src


** Emacs Server
:PROPERTIES:
:ID:       91011ca1-3a58-4d79-ba3a-21b27eb355b7
:END:

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src


** Package and Load Process / Function Paths
:PROPERTIES:
:ID:       d201ac7f-645f-471b-9546-afef19448207
:END:

#+begin_src emacs-lisp

    ;; Setup packages
    ;; code obsolete in emacs27
    (if (version< emacs-version "27.1")
        (package-initialize)
      )


    (add-to-list 'load-path "~/.emacs.d/el")
    (add-to-list 'load-path "~/.emacs.d/el-get/dired+")
    ;;(add-to-list 'load-path "~/.emacs.d/elpa/s-20210603.736/")


    (setq user-emacs-directory "~/.emacs.d/")
    (message user-emacs-directory)

    ;; Functions (load all files in defuns-dir)
    ;;(add-to-list 'load-path user-emacs-directory)
    (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
    (dolist (file (directory-files defuns-dir t "^[^.#].*el$"))
      (when (file-regular-p file)
        (load (file-name-sans-extension file))))
    ;; (load-library "cglispfuncs")

    ;;  (require 'title-time)
    ;; (require 'setup-daimler-proxy)
    ;; ;; No splash screen please ... jeez
    (setq inhibit-startup-message t)

    ;; Settings for currently logged in user
    ;; keep automatic customizations separately
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file 'noerror)

  ;; create user customization directory for specific username/hostname combination
  (defvar user-settings-dir)
  (setq user-settings-dir
        (joindirs user-emacs-directory "users" (concat user-login-name "-" (system-name) )))

  (mkdir user-settings-dir t)
  (add-to-list 'load-path user-settings-dir)

  ;; load all settings from user machine combination
  (when (file-exists-p user-settings-dir)
      (mapc 'load (directory-files user-settings-dir nil "^[^.#].*el$")))

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups" user-emacs-directory))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; Save point position between sessions
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; Setup elnode before packages to stop it from starting a server
;;(require 'setup-elnode)
;; Setup packages
(require 'setup-package)
;; Set path to dependencies
(setq site-lisp-dir
       (expand-file-name "site-lisp" user-emacs-directory))

;; Set up load path and
(add-to-list 'load-path site-lisp-dir)

;; Add external projects to load path
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))

#+end_src


** Defaults
:PROPERTIES:
:ID:       8e48bca6-9fb1-4ce2-8234-784594027423
:END:

#+begin_src emacs-lisp
  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)
  (setq x-select-enable-primary t)

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Frame titles which are short and informative
  (setq frame-title-format '("%b - Emacs"))

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; ;; Don't highlight matches with jump-char - it's distracting
  ;; (setq jump-char-lazy-highlight-face nil)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 80 characters wide, not 72
  (setq fill-column 80)

  ;; Save a list of recent files visited. (open recent file with C-x f)
  (recentf-mode 1)
  (setq recentf-max-saved-items 100) ;; just 20 is too recent

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  ;; Undo/redo window configuration with C-c <left>/<right>
  (winner-mode 1)

  ;; Never insert tabs
  (setq-default indent-tabs-mode nil)

  ;; Show me empty lines after buffer end
  (setq-default indicate-empty-lines t)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; ;; Don't break lines for me, please
  ;; (setq-default truncate-lines t)

  ;; Keep cursor away from edges when scrolling up/down
  (require 'smooth-scrolling)
  ;; (setq scroll-step 1)
  ;; (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)

  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)

  ;; Represent undo-history as an actual tree (visualize with C-x u)
  (setq undo-tree-mode-lighter "")
  (require 'undo-tree)
  (global-undo-tree-mode)

  ;; ;; Sentences do not need double spaces to end. Period.
  ;; (set-default 'sentence-end-double-space nil)

  ;; Add parts of each file's directory to the buffer name if not unique
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; A saner ediff
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  ;; When popping the mark, continue popping until the cursor actually moves
  ;; Also, if the last command was a copy - skip past all the expand-region cruft.
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (when (eq last-command 'save-region-or-current-line)
        ad-do-it
        ad-do-it
        ad-do-it)
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  ;; don't try to raise windows when switching to a buffer, because this
  ;; fails in any sane tiling window manager
  (setq ido-default-file-method 'selected-window
        ido-default-buffer-method 'selected-window)

  ;; highlight the current line in all buffers
  (global-hl-line-mode 1)

(setq  realgud-safe-mode nil)

#+end_src


** Programming
:PROPERTIES:
:ID:       10eecafe-1a33-4d5d-a162-6fc25c6f4791
:END:

*** Programming General
:PROPERTIES:
:ID:       da20042e-decb-467e-bae5-1f20bef5db7e
:END:

#+begin_src emacs-lisp
(require 'realgud)

(require 'setup-dired)
(require 'setup-wttrin)
(require 'setup-projectile)

;; Setup extensions
 (require 'setup-themes)
;; (eval-after-load 'ido '(require 'setup-ido)) ;; interactive break M-x
;; (eval-after-load 'dired '(require 'setup-python))

;; Setup lsp mode prior to setup-java
;; setup for lsp and dap
(require 'setup-auto-complete)

#+end_src

*** LSP
:PROPERTIES:
:ID:       b204e436-4dff-486d-8eac-8b32772d7574
:END:

#+begin_src emacs-lisp
(require 'setup-lsp)
;; (require 'setup-java)
;; deactivate  jdee for  loading java files
  (setq auto-mode-alist
        (append '(("\\.java\\'" . java-mode)) auto-mode-alist))
(require 'setup-dap-mode)

#+end_src

*** LSP Python
:PROPERTIES:
:ID:       e06bb550-ccf7-4c8a-ba4d-c3d8343b4204
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
;;; name.el --- summary -*- lexical-binding: t -*-

;; Author: CGeng
;; Maintainer: CGeng
;; Version: version
;; Package-Requires: (dependencies)
;; Homepage: homepage
;; Keywords: keywords


;; This file is not part of GNU Emacs

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.


;;; Commentary:

;;; pyright
;;; https://github.com/emacs-lsp/lsp-mode/issues/1863:
;; entweder über vs code installieren oder selbst bauen
;;
;;
;; git clone https://github.com/microsoft/pyright
;; cd pyright
;; npm i
;; npm run build:serverProd
;; das sorgt dafür dass pyright bei mir im Pfad ist
;; which pyright
;; momentan befindet sich das hier: /home/audeering.local/cgeng/.nvm/versions/node/v12.22.1/bin/pyright
;; Nutzung der VSCode Version:
;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
;; (setq lsp-pyright-server-cmd `("node" "~/pyright/client/server/server.bundle.js" "--stdio"))

;; Activating venvs:
;; After changing the virtual env, the lsp workspace has to be restarted:
;; lsp-restart-workspace
;; see https://github.com/emacs-lsp/lsp-pyright/issues/7
;;

;; pyrightconfig
;; Pyright LS uses a file called pyrightconfig.json to include settings
;; This is documented at https://github.com/microsoft/pyright/blob/main/docs/configuration.md
;; This also statest that pyright settings can also be specified in a [tool.pyright] section of a "pyproject.toml" file.
;; some of these settings are also
;; https://blog.pilosus.org/posts/2019/12/26/python-third-party-tools-configuration/
;;
;; https://github.com/emacs-lsp/lsp-pyright
;; Who to devise local adaptions to PYTHONPATH under Emacs lsp pyright?
;; there is a custom variable:
;; python.analysis.extraPaths via lsp-pyright-extra-paths
;;
;; PYTHONPATH
;; Setting py-pythonpath as a .dir-local seems not to work
;; https://github.com/porterjamesj/virtualenvwrapper.el/issues/56
;; What works though is the customization of lsp-pyright-extra-paths
;; All variables that are accessible through Emacs as defcustom are here:
;; https://github.com/emacs-lsp/lsp-pyright

;; Projectile tests
;; Tests : /home/audeering.local/cgeng/.venvs/py37/bin/pytest --ds=app.settings --color=no app/  --ignore app/tests/  --cov=app/study --cov=app/report  --cov=app/core

;; https://github.com/microsoft/pyright/issues/1359
;; Django Stubs: https://pypi.org/project/django-stubs/

;; flycheck
;; using pyright in emacs lsp as well as in vscode gives identical errors except
;; false errors in emacs that are flagged as "lsp-flycheck-info-unnecessary"
;; https://github.com/emacs-lsp/lsp-mode/issues/2255

;; Formatting providers in vscode
;; https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0
;; https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0
;; file->preferences->type "python formatting provider"
;; This gets put into ~/cgeng/.config/Code/User/settings.json
;; "python.formatting.provider": "black"
;; file->preferences->type "format on save"

;; configure black
;; https://dev.to/adamlombard/vscode-setting-line-lengths-in-the-black-python-code-formatter-1g62
;; file->preferences->type "python formatting black args"
;; --line-length 119
;; 119 characters

;; what is pylint: .pylintrc

;; Overview about formatting, organizing imports and style checkers
;; https://zhauniarovich.com/post/2020/2020-04-starting-new-python-project/
;; https://www.reddit.com/r/Python/comments/8oqy03/blog_a_comparison_of_autopep8_black_and_yapf_code/

;; Checkers:
;; pyright
;; python-flake8
;; python-pylint
;; python-pycompile
;; python-pyright
;; python-mypy
;;

;; https://flake8.pycqa.org/en/latest/

;; pip install  --upgrade pylint
;; pip install  --upgrade flake8

;; Vergleich der standard-Autoformatters:
;; https://www.kevinpeters.net/auto-formatters-for-python

;; Emacs LSP-Ansatz:
;; jede Sprache macht es selbst, also kein allgemeines setup für lsp und dap:
;; https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

;; Format Imports Isort -
;; formatting using black and isort
;; https://cereblanco.medium.com/setup-black-and-isort-in-vscode-514804590bf9

;; autoflake will also remove unused imports using pyflakes (which is what flake8 uses to check for extra imports
;;  flycheck-pyflakes  20170330.2311 available  melpa      Support pyflakes in flyc
;; pip install autoflake
;; importmagic
;;
;; yapf stanza example for setup.cfg
;;
;;
;; [yapf]
;; based_on_style = pep8
;; spaces_before_comment = 4
;; split_before_logical_operator = true
;; line-length = 119

;; lisp function to auto-remove unused imports:
;; https://gist.github.com/kracekumar/77d29c7410199fd2cda4

;; linting
;; https://code.visualstudio.com/docs/python/linting
;; https://github.com/emacs-lsp/lsp-mode/issues/1327

;; https://github.com/emacs-lsp/dap-mode/issues/202 DAP Breakpoints
;;
;; Launcher Example(s)
;;
;; Endpoint to get a breakpoint into views when using manage.py
;; (dap-debug
;;  (list :type "python"
;;        :args "runserver --noreload"
;;        :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/"
;;        :module nil
;;        :console "integratedTerminal"
;;        :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/manage.py"
;;        :request "launch"
;;        :name "Python: Django manage"
;;        :django t))
;;
;; env vars do not work:
;; https://github.com/emacs-lsp/dap-mode/issues/202
;; (dap-debug
;;  (list :type "python"
;;        :args "-s"
;;        :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/study/tests/"
;;        :environment-variables '(("FOO" . "BAR"))
;;        :module nil
;;        :console "integratedTerminal"
;;        :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/test.py"
;;        :request "launch"
;;        :name "Python: Django run unit test file"
;;        :django t))

;; usefuly python hooks:
;; https://enzuru.medium.com/helpful-emacs-python-mode-hooks-especially-for-type-hinting-c4b70b9b2216
;; https://github.com/enzuru/.emacs.d

;; https://stackoverflow.com/questions/44094494/can-pycharm-suggest-or-autocomplete-or-insert-type-hints/44102211#44102211


;; Coverage in Emacs
;; roll your own:
;; https://blog.laurentcharignon.com/post/universal-code-coverage/
;;
;; On Elpa:
;; pycoverage https://github.com/mattharrison/pycoverage.el
;;
;;  cov                            20210330.44    available    melpa    Show coverage stats in the fringe.
;;  coverage                       20191113.1958  available    melpa    Code coverage line highlighting
;;  coverlay                       20190414.940   available    melpa    Test coverage overlays
;;
;; not on elpa:
;; in flychecker (m))
;; https://github.com/wbolster/emacs-python-coverage/blob/master/python-coverage.el

;;; Code:



(require 'linum)
(require 'pycoverage)


(defun my-coverage ()
  (interactive)
  (when (derived-mode-p 'python-mode)
    (progn
      (linum-mode)
      (pycoverage-mode))))




(message "Lsp for Python: pyright version")

;; (defun lsp-python-ms-format-buffer ()
;;   (interactive)
;;   (when (and (executable-find "yapf") buffer-file-name)
;;     (call-process "yapf" nil nil nil "-i" buffer-file-name)))

;; (add-hook 'python-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook #'lsp-python-ms-format-buffer t t)))


(use-package python-mode
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp-deferred)
                         ;; (yapf-mode)
                         (lsp-treemacs)
                         )
                     )
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  ;; should be .dir-local:
  ;; (lsp-pyright-venv-path "~/.venvs/py37")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python)
  ;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
  )


  (setq lsp-enable-file-watchers nil)
  (setq lsp-file-watch-threshold 2000)

  (setq lsp-pyright-auto-import-completions t)
  (setq lsp-pyright-auto-search-paths t)

(require 'dap-python)

;; (lsp-client-settings)

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  ;; :bind (:map company-active-map
  ;;        ("<tab>" . company-complete-selection))
  ;;       (:map lsp-mode-map
  ;;        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

(use-package pyvenv
  :config
  (pyvenv-mode 1)
  ;; (setq pyvenv-workon "py37")  ; Default venv
  (pyvenv-tracking-mode 1)
  )  ; Automatically use pyvenv-workon via dir-locals

(provide 'setup-python)

;;; setup-python-lsp-pyright ends here

#+end_src


#+begin_src emacs-lisp
  ;;   not  lsp
  ;; (require 'setup-python-elpy-jedi)   ;; was the old setup-python.el
  ;; (require 'setup-python-lsp-emacs-from-scratch)
  ;;(require 'setup-python-pyright)
  ;; (require 'setup-python-lsp-pyright)

  ;; now: Alays write into setup-python and require so
  (require 'setup-python)
#+end_src




*** LSP Other Languages
:PROPERTIES:
:ID:       3fff27c7-73a4-4dfa-833a-86903c2d8d0b
:END:

#+begin_src emacs-lisp

(require 'setup-typescript)
(require 'setup-angular)
(require 'setup-c-lsp-clangd)
;; (require 'setup-c++)
;; (require 'setup-python-lsp-remember-you)

(eval-after-load 'whitespace '(require 'setup-whitespace))
(eval-after-load 'tramp '(require 'setup-tramp))
;; (require 'setup-perspective)
;; (require 'setup-ffip)
;; (require 'setup-paredit)

(require 'mmm-auto)
(mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

(require 'setup-js2-mode)
(require 'setup-web-mode)
(require 'mmm-auto)
(require 'setup-web-mode)
(require 'setup-vue-mode)

;; (require 'setup-speedbar)

;; (eval-after-load 'sgml-mode '(require 'setup-html-mode))
(eval-after-load 'lisp-mode '(require 'setup-lisp))

(require 'setup-org) ;; organizer todo notes etc

(require 'setup-plantuml) ;; organizer todo notes etc

(require 'setup-latex)

(require 'setup-calendar)
;;(require 'setup-bash)
(require 'setup-octave)
;; (require 'mc)

;;(require 'setup-web-mode)
(require 'setup-jabber)
(require 'setup-chat-tracking)
;; (eval-after-load 'ruby-mode '(require 'setup-ruby-mode))
 (eval-after-load 'clojure-mode '(require 'setup-clojure-mode))
;; (eval-after-load 'markdown-mode '(require 'setup-markdown-mode))
;;(require 'setup-pandoc)

;; Load slime-js when asked for
;; (autoload 'slime-js-jack-in-browser "setup-slime-js" nil t)
;; (autoload 'slime-js-jack-in-node "setup-slime-js" nil t)

;; Map files to modes
(require 'mode-mappings)


;; (require 'expand-region)
;; (require 'mark-more-like-this)
;; (require 'inline-string-rectangle)
;;(require 'multiple-cursors)
;; (require 'delsel)
;; (require 'jump-char)
;; (require 'eproject)
;; (require 'wgrep)
;; (require 'smart-forward)
;; (require 'change-inner)
;; (require 'multifiles)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ansi Farben in compilation buffers:                                                                  ;;
;; Also hook:                                                                                           ;;
;; https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode                       ;;
;; Als Function:                                                                                        ;;
;; https://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun display-ansi-colors ()
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))

(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
;; gehen alle nicht;
; (add-hook 'sbt-mode-hook 'display-ansi-colors)
;; (add-hook 'sbt-mode-hook 'ansi-color-for-comint-mode-on)
;; (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
;; (add-hook 'async-bytecomp-package-mode-hook 'colorize-compilation-buffer)

;; Fill column indicator
;; (require 'fill-column-indicator)

;; Browse kill ring
(require 'browse-kill-ring)
(setq browse-kill-ring-quit-action 'save-and-restore)

;; Smart M-x is smart - der ido fuer M-x
(require 'smex)
(smex-initialize)

;; Setup key bindings
(require 'key-bindings)
(require 'setup-helm)
(require 'setup-ibuffer)
(require 'setup-doom-modeline)

;; (require 'setup-eclim)
;; This currently breaks dired icons. Why?
;; (require 'setup-scala)
(require 'setup-treemacs)
(require 'setup-groovy)
;; (require 'setup-eclim)


;; Misc
;; (require 'appearance)
;; (require 'my-misc)

;; Diminish modeline clutter
(require 'diminish)
;; (diminish 'eldoc-mode)
;; (diminish 'paredit-mode)

;; Elisp go-to-definition with M-. and back again with M-,
;; (autoload 'elisp-slime-nav-mode "elisp-slime-nav")
;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t) (eldoc-mode 1)))
;; (eval-after-load 'elisp-slime-nav '(diminish 'elisp-slime-nav-mode))

;; Email, baby
;; (require 'setup-mule)

;; Run at full power please
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)

;; electric-pair-mode
;; geht nur in emacs 24 turn on automatic bracket insertion by pairs. New in emacs 24
;; see http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
(electric-pair-mode 1)

(when (fboundp 'cycle-themes)
  (cycle-themes))

(put 'scroll-left 'disabled nil)


  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...

;;(add-to-list 'load-path "/path/to/downloaded/openwith.el")
;;./elpa/openwith-20120531.1436/openwith.el:1

;; ("\\.pdf\\'"  "okular" (file))

(require 'openwith)
(setq openwith-associations '(
                              ("\\.mp4\\'"  "vlc" (file))
                              ("\\.docx\\'" "lowriter" (file))
                              ("\\.odt\\'"  "lowriter" (file))
                              ("\\.pptx\\'"  "loimpress" (file))
                              ))
;; unset associations altogether
;; (setq openwith-associations '())

(openwith-mode)
(display-battery-mode)
(setq require-final-newline t)

(require 'setup-nxml)
;; (require 'setup-pdf-tools)
(require 'setup-json-mode)
(require 'setup-magit)
;; (require 'setup-tags)

(require 'setup-flycheck-mode)
;; company mode autocompletion
;;(add-hook 'after-init-hook 'global-company-mode)

;;(require 'pasc-mode)

(require 'setup-yasnippet)

(require 'setup-supercollider)
(require 'setup-yaml-mode)
(require 'setup-editorconfig)
(require 'setup-rtags)
(require 'setup-treemacs)

(require 'setup-shell-scripting)

(require 'calfw)
(require 'calfw-gcal)
(require 'calfw-org)
(require 'calfw-gcal)
(require 'calfw-ical)
(require 'setup-user-menu)

(put 'erase-buffer 'disabled nil)

;; fix misalignment in popus:
(setq popup-use-optimized-column-computation nil)

(add-hook 'makefile-mode-hook 'makefile-executor-mode)

;; https://stackoverflow.com/questions/12224909/is-there-a-way-to-get-my-emacs-to-recognize-my-bash-aliases-and-custom-functions/12229404#12229404
;; ->  make  all  envs  visible in  also org mode
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")


;; - '(safe-local-variable-values '((testvar\  . "hello")))
;; + '(safe-local-variable-values
;; +   '((pyvenv-activate . "~/.venvs/py37/")
;; +     (testvar\  . "hello")))
;;   '(sql-connection-alist
;;     '(("dataupload local container mysql"

;; (put 'pyvenv-activate 'safe-local-variable (lambda (_) t))

;; projectile-project-test-cmd :

(put 'pyvenv-activate 'safe-local-variable (lambda (_) t))
(put 'projectile-project-test-cmd 'safe-local-variable (lambda (_) t))
(put 'py-pythonpath  'safe-local-variable (lambda (_) t))

;; fix missing alt-key in WSL
(setq x-alt-keysym 'meta)
(put 'set-goal-column 'disabled nil)

#+end_src



** Misc
:PROPERTIES:
:ID:       d7d9d2b8-5c98-4fe9-bab5-d0c725bf3911
:END:

*** Defuns
:PROPERTIES:
:ID:       8ee4a7b9-f9e7-422e-8c04-3c17a61da460
:END:

#+begin_src emacs-lisp
(defun edit-current-file-as-root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))
#+end_src

*** Imenu auto
:PROPERTIES:
:ID:       820994eb-2700-428a-a80b-d5e0ede6299d
:END:
#+begin_src emacs-lisp

;; add Imenu whenever possible.
;; see https://www.emacswiki.org/emacs/ImenuMode for documentation
(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "Index") (error nil)))
 (add-hook 'font-lock-mode-hook 'try-to-add-imenu)

#+end_src


*** Visible Bell off
:PROPERTIES:
:ID:       4b5650ad-478a-4c5e-8120-c56375abf02a
:END:

:PROPERTIES:
:ID:       6d9c48b7-0c81-4a42-a7f0-dfe149934fb2
:END:
#+begin_src emacs-lisp
(setq visible-bell t)
;; ring-bell function not doing what its supposed to?
;; see https://www.emacswiki.org/emacs/AlarmBell
;; (defun ring-bell-function()
;;   "do not ring the bell when cursor has gone too far outside."
;;   (message "Went outside but not ringing the bell.")
;;     )
#+end_src

*** Mac Specific
:PROPERTIES:
:ID:       7ef44450-4c70-4117-8a72-44d99a0138e3
:END:
#+begin_src emacs-lisp
;; Are we on a mac?
(setq is-mac (equal system-type 'darwin))
;; Setup environment variables from the user's shell.
(when is-mac (exec-path-from-shell-initialize))
;; (when is-mac (require 'mac))

#+end_src


* Applications Config Example

** Some App
:PROPERTIES:
:ID:       216fa964-a617-4a95-b3f4-3bd82856d8b1
:END:

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src emacs-lisp :tangle no :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src

#+begin_src emacs-lisp :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src
