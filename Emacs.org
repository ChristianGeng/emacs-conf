PROPERTIES:
#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-g.el :mkdirp yes

# M-x org-babel-tangle

* Tangle and Reload init file

#+begin_src emacs-lisp :tangle no :noweb yes
  (org-babel-tangle)
  (load-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:
: t

* Eearly Init - not needed?

https://www.masteringemacs.org/article/whats-new-in-emacs-27-1

However, if your init file changes the values of

- package-load-list
- or 'package-user-dir', or sets
- package-enable-at-startup to nil then


- You can move that code to the early init file (see above), so those
  settings apply before Emacs tries to activate the packages.
- You can use the new 'package-quickstart' so activation of packages
  does not need to pay attention to 'package-load-list' or
  'package-user-dir' any more.



* The whole Init File
:PROPERTIES:
:ID:       214b3d62-1d24-46f8-a373-e3a9e665602d
:END:

** Configure Startup
:PROPERTIES:
:ID:       8ae12a93-e115-4db2-a5fb-430354f6b6af
:END:

#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  ;; (setq gc-cons-threshold (* 50 1000 1000))
  ;; (setq gc-cons-threshold (* 350 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src



** Coding System
:PROPERTIES:
:ID:       97c85ba1-ae76-4450-99a5-3ba469d4e46d
:END:

#+begin_src emacs-lisp

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-selection-coding-system 'utf-8)

#+end_src



** Package and Load Process / Function Paths
:PROPERTIES:
:ID:       d201ac7f-645f-471b-9546-afef19448207
:END:

#+begin_src emacs-lisp

  ;; Setup packages
  ;; code obsolete in emacs27
  (if (version< emacs-version "27.1")
      (package-initialize)
    )

  (add-to-list 'load-path (expand-file-name "doom-snippets" user-emacs-directory))
  (setq doom-snippets-enable-short-helpers nil)
  (add-to-list 'load-path "~/.emacs.d/el")
  ;; (add-to-list 'load-path "~/.emacs.d/elpa/s-20210616.619/")
  ;; (require 's)

  (use-package s :ensure t)



  (setq user-emacs-directory "~/.emacs.d/")
  (message user-emacs-directory)

  ;; Functions (load all files in defuns-dir)
  ;;(add-to-list 'load-path user-emacs-directory)
  (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
  (dolist (file (directory-files defuns-dir t "^[^.#].*el$"))
    (when (file-regular-p file)
      (load (file-name-sans-extension file))))

  ;;  (require 'title-time)
  ;; (require 'setup-daimler-proxy)
  ;; ;; No splash screen please ... jeez
  (setq inhibit-startup-message t)

  ;; Settings for currently logged in user
  ;; keep automatic customizations separately
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)

  ;; create user customization directory for specific username/hostname combination
  (defvar user-settings-dir)
  (setq user-settings-dir
        (joindirs user-emacs-directory "users" (concat user-login-name "-" (system-name) )))

  (mkdir user-settings-dir t)
  (add-to-list 'load-path user-settings-dir)

  ;; load all settings from user machine combination
  (when (file-exists-p user-settings-dir)
    (mapc 'load (directory-files user-settings-dir nil "^[^.#].*el$")))

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups" user-emacs-directory))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; Save point position between sessions
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))

  ;; Setup elnode before packages to stop it from starting a server
  ;;(require 'setup-elnode)
  ;; Setup packages
  (require 'setup-package)
  ;; Set path to dependencies
  (setq site-lisp-dir
        (expand-file-name "site-lisp" user-emacs-directory))

  ;; Set up load path and
  (add-to-list 'load-path site-lisp-dir)

  ;; Add external projects to load path
  (dolist (project (directory-files site-lisp-dir t "\\w+"))
    (when (file-directory-p project)
      (add-to-list 'load-path project)))

#+end_src

#+RESULTS:


** Defaults
:PROPERTIES:
:ID:       8e48bca6-9fb1-4ce2-8234-784594027423
:END:

#+begin_src emacs-lisp
  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)
  (setq x-select-enable-primary t)

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Set to t in order to move files to trash when deleting
  (setq delete-by-moving-to-trash nil)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Frame titles which are short and informative
  (setq frame-title-format '("%b - Emacs"))

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; ;; Don't highlight matches with jump-char - it's distracting
  ;; (setq jump-char-lazy-highlight-face nil)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 80 characters wide, not 72
  (setq fill-column 80)

  ;; Save a list of recent files visited. (open recent file with C-x f)
  (recentf-mode 1)
  (setq recentf-max-saved-items 100) ;; just 20 is too recent

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  ;; Undo/redo window configuration with C-c <left>/<right>
  (winner-mode 1)

  ;; Never insert tabs
  (setq-default indent-tabs-mode nil)

  ;; Show me empty lines after buffer end
  (setq-default indicate-empty-lines t)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; ;; Don't break lines for me, please
  ;; (setq-default truncate-lines t)

  ;; Keep cursor away from edges when scrolling up/down
  (require 'smooth-scrolling)
  ;; (setq scroll-step 1)
  ;; (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)

  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)


  ;; ;; Sentences do not need double spaces to end. Period.
  ;; (set-default 'sentence-end-double-space nil)

  ;; Add parts of each file's directory to the buffer name if not unique
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; A saner ediff
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  ;; When popping the mark, continue popping until the cursor actually moves
  ;; Also, if the last command was a copy - skip past all the expand-region cruft.
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (when (eq last-command 'save-region-or-current-line)
        ad-do-it
        ad-do-it
        ad-do-it)
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  ;; don't try to raise windows when switching to a buffer, because this
  ;; fails in any sane tiling window manager
  (setq ido-default-file-method 'selected-window
        ido-default-buffer-method 'selected-window)

  ;; highlight the current line in all buffers
  (global-hl-line-mode 1)

  (setq  realgud-safe-mode nil)

#+end_src

** Show Line Numbers per Default, with some Exceptions
:PROPERTIES:
:ID:       fa826301-f5ae-4c2a-9280-84422f397ff0
:END:

#+begin_src emacs-lisp

  (global-display-line-numbers-mode t)

  ;; Override some modes which derive from the above
  (dolist (mode '(term-mode-hook
                  ag-mode-hook
                  magit-mode-hook
                  dired-mode-hook
                  comint-mode-hook
                  shell-mode-hook
                  helm-mode-hook
                  ibuffer-mode-hook
                  eshell-mode-hook))

    (add-hook mode (lambda () (display-line-numbers-mode 0)))
    )

#+end_src

#+RESULTS:


*** Set frame transparency, maximize windows.
:PROPERTIES:
:ID:       3e5a576d-bc05-4eb0-bc22-19964267f72f
:END:

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(99 . 99))
  (add-to-list 'default-frame-alist '(alpha . (99 . 99)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

#+RESULTS:
: ((fullscreen . maximized) (alpha 90 . 90) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))




** Interface more minimalsitic(menubar etc.))
:PROPERTIES:
:ID:       53c1899a-035a-44f3-9460-d07523a3a1b3
:END:

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  ;;  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)       ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar
#+end_src

** Keyboard Interaction (and the Evil Chapter)
:PROPERTIES:
:ID:       7659bb1b-d161-4195-9d35-657b64674762
:END:

#+begin_src emacs-lisp
  ;; Smart M-x is smart - der ido fuer M-x
  (require 'smex)
  (smex-initialize)

  ;; Setup key bindings
  (require 'key-bindings)
  (require 'setup-helm)

  ;; Diminish modeline clutter
  (require 'diminish)

#+end_src

*** Undo system

- C-r in evil/vim: undo/redo functionality
- it will suggest to customize the evil undo system, see customization below
- Evil has some fine tunings of the undo system: ~(setq evil-want-fine-undo t)~,
  see [[https://emacs.stackexchange.com/questions/3358/how-can-i-get-undo-behavior-in-evil-similar-to-vims][here.]]

#+begin_src emacs-lisp
  ;; Represent undo-history as an actual tree (visualize with C-x u)
  ;; (setq undo-tree-mode-lighter "")
  ;;(setq undo-tree-mode-lighter "Undo-Tree") defaul

  ;;(setq evil-want-fine-undo t)
  (require 'undo-tree)
  (global-undo-tree-mode)
#+end_src





**** Undo tree create "*.~undo-tree~" files

Apparently the default has changed recently, so we need to
set the history for the time being, see [[https://www.reddit.com/r/emacs/comments/tejte0/undotree_bug_undotree_files_scattering_everywhere/][this reddit post.]]


#+begin_src emacs-lisp
  (setq undo-tree-auto-save-history nil)
#+end_src

The post also suggests that [[https://gitlab.com/ideasman42/emacs-undo-fu-session][emacs-undo-fu-session]] might be interesting.

*** Evil
:PROPERTIES:
:ID:       a33db7a9-3505-420b-80f8-fe89b83495b7
:END:

https://github.com/noctuid/evil-guide
https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
https://www.linode.com/docs/guides/emacs-evil-mode/

[[https://github.com/emacs-evil/evil-magit][Evil-magit]] is not part of the  [[https://github.com/emacs-evil/evil-collection][Evil Collection]].

#+begin_src emacs-lisp

  ;; do ot apply yet
  (defun cg/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    shell-mode
                    term-mode
                    ibuffer-mode
                    ag-mode
                    dired-mode
                    flycheck-mode
                    ))
      (add-to-list 'evil-emacs-state-modes mode)
      ))

  (use-package evil
    :init
    (setq evil-want-integration t)  ;; seems to be always good
    (setq evil-want-keybinding nil) ;; david wilson prefers not to use thes3
    (setq evil-want-C-u-scroll nil) ;; do not override C-u prefix
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree) ;; alternative is undo-fu
    ;; :hook
    :config
    ;; evil: green: normal mode;
    (evil-mode 1)
    ;; drop back to normal mode using C-g
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;; in vim insert mode, C-h is now backspace. Normally in emacs it would enter help
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    :hook (evil-mode . cg/evil-hook)
    )

  ;;  (evil-set-initial-state 'messages-buffer-mode 'normal)
  ;;  (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))


#+end_src

#+RESULTS:


**** Evil Nerd Commenter

=M-;= does comment, but the behavior sometimes isn't exactly what you'd expect.

https://github.com/redguardtoo/evil-nerd-commenter

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :ensure t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src
**** Usage and Vim bindings

***** States

****** Normal State

evil-normal-state
CTRL-z: go to emacs state when in normal state
White dot

****** Emacs state
CTRL-z: go back to normal state when in emacs state
evil-emacs-state
Blue dot

****** Insert State

evil-insert-state
i insert here
I Insert at the beginning of the line
a cursor at end
A go into insert mode at end of line
o with newline
O Delete Line and go into insert
s substitute under cursor
S Similar to O?
etc.

asdasdasddddddddddddddddddddasd
sdasdasdasdasdasdasdasdasda
asdasdasdasdasdasdasdadsasdsadas

******* Paste in insert state

see https://stackoverflow.com/questions/2861627/paste-in-insert-mode
While in insert mode hit CTRL-R {register}

Examples:

CTRL-R * will insert in the contents of the clipboard
CTRL-R " (the unnamed register) inserts the last delete or yank.
To find this in vim's help type :h i_ctrl-r

****** Visual state

evil-visual-state

C-v Visual Block
S-v Visual Line
v Visual State

v$ - select until end of line
v^ - select until beginning of line

vip - select paragraph


****** Replace State

Enter Replace state from normal state typing R
Overwrites text under cursor

****** Evil Motion State

M-x evil motion state
golded dot

****** Evil Operator-Pending

M-x evil operator-state
No clue what this does



***** Normal mode and bindings

****** Visual Mode

- S-v: Switch to visual mode

****** Navigating
- ^: got to beginning of line
- j: next line
- k: previos line
- b: back one word
- w: forward one word
- C-u up half a page -> not working for me: Why: bound to "universal arument" in emacs
- C-d down half a page
- ) to the first word of the next sentence
- ( to the previous sentence
- u undo thing
- G to to last line
- gg to to first line
- 2w  navigate two words forward


w - until the start of the next word, EXCLUDING its first character.
e - to the end of the current word, INCLUDING the last character.
$ - to the end of the line, INCLUDING the last character.
0 - Got to the beginning of the line

asssss asdas s asdasda dasd


****** Indenting

The == re-indents the line to suit its new position.
For the visual-mode mappings, gv reselects the last visual block
= re-indents that block.


****** Moving Lines around

:m .-2 move line one up
:m .+1 move line one down

The same in vimscript that goes to .vimrc:

nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==

https://github.com/emacs-evil/evil-collection

****** Deleting

d   motion

d      - is the delete operator.
motion - is what the operator will operate on (listed below).


- dd delete line
- dw delete


w - until the start of the next word, EXCLUDING its first character.
e - to the end of the current word, INCLUDING the last character.
$ - to the end of the line, INCLUDING the last character.
^ - to the beginning of the line
b - back to the beginning of the word
{ - delete to beginning of paragraph
} - delete to end of paragraph


d3w - delete three words in the future
d5d - delete 5 lines
2dd - delete 2 lines
2dd - delete 2 lines

y3w - copy the next three words

das a hier is sowas wie ein modiefier des delete word commands:

daw - delete a word and all whitespace around it. a stands for around
diw - Delete just the word: das i ist für inside?
dw - ???
dap - delete around paragraph
5dap - delete around 5 paragraphs
di( - delete inside paremtheses
di{ - delete inside curly bracces
di" seems not to work!

asdasd {a abn asdasd asd asdfgg } noch asdasd
(asdasdasd )

dd - delete (cut) a line
dw - delete the word right of the cursor
d$ - delete from cursor to the end of the line
d^ - delete from cursor to beginning of line

asssssssssssssssssssssssssssssssssssssssss

D - delete (cut) to the end of the line
****** Replace Modifier

c is the change modifier

caw - replace current word
ciw - replace inside word
c$  - change from cursor to end of line
C   - same as c$

Type  rx  to replace the character at the cursor with  x .

asdasd (asd asdas asd)

****** Cutting and pasting

y - yank (copy) marked text
d - delete marked text

yy - yank (copy) a line
2yy - yank (copy) 2 lines
yiw - yank (copy) word under the cursor

yip - copy current paragraph

****** Searching and Replacing

https://vim.fandom.com/wiki/Search_and_replace#Basic_search_and_replace

:s/foo/bar/g
Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.

:%s/foo/bar/gc
Change each 'foo' to 'bar', but ask for confirmation first.


n - next occ
N - prev occ

Typing  /  followed by a phrase searches FORWARD for the phrase.
Typing  ?  followed by a phrase searches BACKWARD for the phrase.
CTRL-O takes you back to older positions, CTRL-I to newer positions.

To substitute new for the first old in a line type    :s/old/new
To substitute new for all 'old's on a line type       :s/old/new/g
To substitute phrases between two line #'s type       :#,#s/old/new/g
To substitute all occurrences in the file type        :%s/old/new/g
To ask for confirmation each time add 'c'             :%s/old/new/gc


****** Upercasing and lower casing


See the following methods:

~    : Changes the case of current character
guu  : Change current line from upper to lower.
gUU  : Change current LINE from lower to upper.
guw  : Change to end of current WORD from upper to lower.
guaw : Change all of current WORD to lower.
gUw  : Change to end of current WORD from lower to upper.
gUaw : Change all of current WORD to upper.
g~~  : Invert case to entire line
g~w  : Invert case to current WORD
guG  : Change to lowercase until the end of document.
gU)  : Change until end of sentence to upper case
gu}  : Change to end of paragraph to lower case
gU5j : Change 5 lines below to upper case
gu3k : Change 3 lines above to lower case


source: https://stackoverflow.com/questions/2946051/changing-case-in-vim#:~:text=2%20Answers&text=Visual%20select%20the%20text%2C%20then,gu%20for%20lowercase.

****** Closing Buffer

ZQ - closes whole editor

****** More stuff in normal mode:

- zz: put current line under cursor in the middle
- zt: put current line under cursor at the top
- zb: put current line to the bottom

- { : Move by paragraph up
- } : Move by paragraph down

- % show matching ({[


löetasdasdjlajdklsadjklaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaas


****** Commands

******* Working with buffers

:bd - delete buffer


******* Working with windows

:split - split horizontally
:vsplit - split left/right
:sort - sort lines
******* Working with Tabs

Ctrl+WT (that's a capital T) to move any open window to its own tab.
:tabnew - create a tab
:tabnext

******* Open files

:e ~/.bashrc - edit this file
:r /path/to/file - inserts file into current buffer

https://blog.confirm.ch/mastering-vim-opening-files/

***** Links

- https://vim.rtorr.com/
- https://devhints.io/vim
- https://vim.fandom.com/wiki/Moving_lines_up_or_down
- [[https://itsfoss.com/vifm-terminal-file-manger/][vifm Vim File Manager]]

/home/audeering.local/cgeng/code/data_collection/aisoundlab/portal/src/app/app-init.ts





** Programming

:PROPERTIES:
:ID:       10eecafe-1a33-4d5d-a162-6fc25c6f4791
:END:

*** Programming General
:PROPERTIES:
:ID:       da20042e-decb-467e-bae5-1f20bef5db7e
:END:

#+begin_src emacs-lisp
  (require 'realgud)

  (require 'setup-projectile)

  ;; Setup extensions
  (require 'setup-themes)
  ;; (eval-after-load 'ido '(require 'setup-ido)) ;; interactive break M-x
  ;; (eval-after-load 'dired '(require 'setup-python))

  ;; Setup lsp mode prior to setup-java
  ;; setup for lsp and dap
  (require 'setup-auto-complete)

#+end_src

*** Rainbow Delim
:PROPERTIES:
:ID:       5d59fc74-cea3-415b-ab72-a88eadd97d17
:END:

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+end_src

;; Rainbow Delimiters
;;(setup (:pkg rainbow-delimiters)
;;  (:hook-into prog-mode))



*** Notebooks


(require 'ein)
(require 'ein-notebook)
(require 'ein-subpackages)

OR

https://github.com/nnicandro/emacs-jupyter#kernelnotebook-server

M-x jupyter-kernel-list-servers
M-x jupyter-connect-server-repl


(dired "/jpy:localhost#8890:/")
(dired "http:localhost#8890:")

(dired "/jpy:localhost#8890:/")





*** LSP General
:PROPERTIES:
:ID:       b204e436-4dff-486d-8eac-8b32772d7574
:END:

-  often it is necessary to delete this file

  ~/.emacs.d/.lsp-session-v1


#+begin_src emacs-lisp
  (require 'setup-lsp)
  ;; 0(require 'setup-java)
  ;; deactivate  jdee for  loading java files
  (setq auto-mode-alist
        (append '(("\\.java\\'" . java-mode)) auto-mode-alist))
  (require 'setup-dap-mode)

#+end_src

#+RESULTS:
: setup-dap-mode




*** Python Info
:PROPERTIES:
:ID:       e06bb550-ccf7-4c8a-ba4d-c3d8343b4204
:END:
**** pyenv

https://github.com/pythonic-emacs/pyenv-mode
https://github.com/pyenv/pyenv

(pyenv-mode)
then run pyenv-mode-set

**** DAP Launching

#+begin_src emacs-lisp :tangle no
  ;; https://github.com/emacs-lsp/dap-mode/issues/202 DAP Breakpoints
  ;;
  ;; Launcher Example(s)
  ;;
  Endpoint to get a breakpoint into views when using manage.py
  (dap-debug
   (list :type "python"
         :args "runserver --noreload"
         :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/"
         :module nil
         :console "integratedTerminal"
         :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/manage.py"
         :request "launch"
         :name "Python: Django manage"
         :django t))
#+end_src

#+begin_src emacs-lisp :tangle no
  ;;
  ;; env vars do not work:
  ;; https://github.com/emacs-lsp/dap-mode/issues/202
  (dap-debug
   (list :type "python"
         :args "-s"
         :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/study/tests/"
         :environment-variables '(("FOO" . "BAR"))
         :module nil
         :console "integratedTerminal"
         :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/test.py"
         :request "launch"
         :name "Python: Django run unit test file"
         :django t))
#+end_src

**** Linting, Checkers, Static Code Analysis - Hooks

Overview about formatting, organizing imports and style checkers:
- https://zhauniarovich.com/post/2020/2020-04-starting-new-python-project/
- https://www.reddit.com/r/Python/comments/8oqy03/blog_a_comparison_of_autopep8_black_and_yapf_code/

Usefuly Hooks Article: https://enzuru.medium.com/helpful-emacs-python-mode-hooks-especially-for-type-hinting-c4b70b9b2216

***** Linting

****** Linters overview
;; pylint: .pylintrc

- pyright
- python-flake8  https://flake8.pycqa.org/en/latest/
- python-pylint
- python-pycompile
- python-pyright
- python-mypy

pip install  --upgrade pylint
pip install  --upgrade flake8

****** pylint

https://liuluheng.github.io/wiki/public_html/Python/flycheck-pylint-emacs-with-python.html

***** Pyright Code Checking Information
****** Django Problem
;; https://github.com/microsoft/pyright/issues/1359
;; Django Stubs: https://pypi.org/project/django-stubs/

;; flycheck
;; using pyright in emacs lsp as well as in vscode gives identical errors except
;; false errors in emacs that are flagged as "lsp-flycheck-info-unnecessary"
;; https://github.com/emacs-lsp/lsp-mode/issues/2255

;; Vergleich der standard-Autoformatters:
;; https://www.kevinpeters.net/auto-formatters-for-python

;; Emacs LSP-Ansatz:
;; jede Sprache macht es selbst, also kein allgemeines setup für lsp und dap:
;; https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

;; Format Imports Isort -
;; formatting using black and isort
;; https://cereblanco.medium.com/setup-black-and-isort-in-vscode-514804590bf9

;; autoflake will also remove unused imports using pyflakes (which is what flake8 uses to check for extra imports
;;  flycheck-pyflakes  20170330.2311 available  melpa      Support pyflakes in flyc
;; pip install autoflake
;; importmagic
;;
;; yapf stanza example for setup.cfg
;;
;;
;; [yapf]
;; based_on_style = pep8
;; spaces_before_comment = 4
;; split_before_logical_operator = true
;; line-length = 119

;; lisp function to auto-remove unused imports:
;; https://gist.github.com/kracekumar/77d29c7410199fd2cda4

;; linting
;; https://code.visualstudio.com/docs/python/linting
;; https://github.com/emacs-lsp/lsp-mode/issues/1327




***** ImportMagic

Importmagic does not work!

https://github.com/anachronic/importmagic.el
$ pip install importmagic epc

#+begin_example emacs-lisp :tangle no

;;(use-package importmagic
 ;;   :ensure t
    ;; will add the hook into python usepackage configuration
    ;;:config
    ;;(add-hook 'python-mode-hook 'importmagic-mode)
   ;; )
#+end_example

***** Type Hinting
;; https://stackoverflow.com/questions/44094494/can-pycharm-suggest-or-autocomplete-or-insert-type-hints/44102211#44102211

***** Code Coverage in Emacs

- roll your own  ;; https://blog.laurentcharignon.com/post/universal-code-coverage/
- On Elpa:  pycoverage https://github.com/mattharrison/pycoverage.el
- not on elpa: https://github.com/wbolster/emacs-python-coverage/blob/master/python-coverage.el

#+begin_example
;;  cov                            20210330.44    available    melpa    Show coverage stats in the fringe.
;;  coverage                       20191113.1958  available    melpa    Code coverage line highlighting
;;  coverlay                       20190414.940   available    melpa    Test coverage overlays
#+end_example

**** About Pyright

***** Build Pyright

Pylance = Pyright + IntelliCode AI models (not open-source)

#+begin_src bash :tangle no
  https://github.com/emacs-lsp/lsp-mode/issues/1863:
  entweder über vs code installieren oder selbst bauen
  git clone https://github.com/microsoft/pyright
  cd pyright
  npm i
  npm run build:serverProd
     ;; das sorgt dafür dass pyright bei mir im Pfad ist
     ;; which pyright
     ;; momentan befindet sich das hier: /home/audeering.local/cgeng/.nvm/versions/node/v12.22.1/bin/pyright
#+end_src

***** Use VS Code Version

#+begin_src emacs-lisp :tangle no
  ;; Nutzung der VSCode Version:
  ;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
  ;; (setq lsp-pyright-server-cmd `("node" "~/pyright/client/server/server.bundle.js" "--stdio"))
#+end_src

Activating venvs:
After changing the virtual env, the lsp workspace has to be restarted:
see https://github.com/emacs-lsp/lsp-pyright/issues/7

#+begin_src emacs-lisp :tangle no
  (lsp-restart-workspace)
#+end_src

***** Configuration

- Pyright LS uses a file called pyrightconfig.json to include settings
This is documented at https://github.com/microsoft/pyright/blob/main/docs/configuration.md
- This also statest that pyright settings can also be specified in a [tool.pyright] section of a "pyproject.toml" file.
- some of these settings are also
  https://blog.pilosus.org/posts/2019/12/26/python-third-party-tools-configuration/
-  https://github.com/emacs-lsp/lsp-pyright
- hoe to devise local adaptions to PYTHONPATH under Emacs lsp pyright?
- there is a custom variable:
- python.analysis.extraPaths via lsp-pyright-extra-paths

-  PYTHONPATH  Setting py-pythonpath as a .dir-local seems not to work https://github.com/porterjamesj/virtualenvwrapper.el/issues/56
- What works though is the customization of lsp-pyright-extra-paths
- All variables that are accessible through Emacs as defcustom are here:
  https://github.com/emacs-lsp/lsp-pyright

code/data_collection/aisoundlab/audb_covid_19/1.0.0/


***** pyrightconfig.json example

Not sure whehter emacs interprets this at all

#+begin_src json :tangle no
  {
      "exclude": ["**/node_modules", "**/__pycache__"],
      "ignore": ["**/node_modules", "**/__pycache__"],
      "include": ["flextensor", "tvm","1.0.0"],
      "pythonPlatform": "Linux",
      "pythonVersion": "3.7",
      "reportMissingImports": true,
      "reportMissingTypeStubs": false,
      "stubPath": "typings",
      "typeCheckingMode": "basic",
      "venvPath": "/home/audeering.local/cgeng/.venvs",
      "venv": "py37"
  }

#+end_src


#+begin_src bash :tangle no

#+end_src


#+begin_src bash :tangle no

#+end_src

*****


*** LSP Python: Writing setup-python.el file the conf
:PROPERTIES:
:ID:       e1a1988b-a70a-435c-98e3-d95c61522659
:END:

**** Header
:PROPERTIES:
:ID:       6644930c-c376-4981-ae63-fc57ab4f5122
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  ;;; setup-python.el --- summary -*- lexical-binding: t -*-
  ;;
  ;;; Code:

  (message "Lsp Python begins here")
#+end_src


**** Function to restart Workspace unfinished
:PROPERTIES:
:ID:       41f1d2b5-4526-4261-aaaf-00525bd8034c
:END:

see http://ergoemacs.org/emacs/elisp_file_name_dir_name.html

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (defun lsp-workspace-restart-deep ()
    (interactive
     (delete-file (joindirs user-emacs-directory  ".lsp-session-v1"))
     (lsp-workspace-restart))
    )

  ;;   ;;;###autoload
  ;; (defun toggle-menubar ()
  ;; "Toggle menubar visibility.
  ;; If toolbar is invisible, turn it on.  Otherwise turn it off."
  ;;   (interactive)
  ;;   (if (eq menu-bar-mode t)
  ;;       (menu-bar-mode -1)
  ;;           (menu-bar-mode t)

  ;; ))



#+end_src

#+RESULTS:
: lsp-workspace-restart-deep

(load-file "~/.emacs.d/init.el")

#+RESULTS:
: lsp-workspace-restart-deep


**** python-pytest

https://github.com/wbolster/emacs-python-pytest


python-pytest
python-pytest-file
python-pytest-file-dwim
python-pytest-files
python-pytest-function
python-pytest-function-dwim
python-pytest-last-failed
python-pytest-repeat


#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (use-package python-pytest
    :ensure t
    )
#+end_src

(setq python-pytest-confirm t)

**** Configure Py3 Mode

Py3 mode defined in ‘python-mode.el’:
Major mode for Python shell process.

Das muss der ~py-shell-mode~ sein


**** Format buffer using yapf
:PROPERTIES:
:ID:       674e2989-94c8-4dbe-976a-64ad936aa62c
:END:

really neceessary as yapf-mode, yapfify etc. exist

see https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-lsp.el

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes

  (defun cg/python-yapf-format-buffer ()
    (interactive)
    (when (and (executable-find "yapf") buffer-file-name)
      (call-process "yapf" nil nil nil "-i" buffer-file-name)))

  ;; add hook example
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'after-save-hook #'lsp-python-ms-format-buffer t t)))


#+end_src


**** Function to remove unused imports using autoflake
:PROPERTIES:
:ID:       5a5a162d-6b68-405d-9c47-02775e75271e
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  ;; does not work as custom variable
  ;; (defcustom python-autoflake-path
  ;;   (replace-regexp-in-string "\n$" "" (shell-command-to-string "which autoflake"))
  ;;   )

  (defvar python-autoflake-path
    (replace-regexp-in-string "\n$" "" (shell-command-to-string "which autoflake"))
    )

  (defun python-remove-unused-imports()
    "Use Autoflake to remove unused function"
    "autoflake --remove-all-unused-imports -i unused_imports.py"
    (interactive)
    (shell-command
     (format "%s --remove-all-unused-imports -i %s"
             python-autoflake-path
             (shell-quote-argument (buffer-file-name))))
    (revert-buffer t t t))
#+end_src

#+RESULTS:
: python-remove-unused-imports

**** Function to remove unused variables using autoflake
:PROPERTIES:
:ID:       9259bd8f-9cce-4f06-b262-d9f487959596
:END:

- this goes by using the --remove-unused-variables flag

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes


  (defun python-remove-unused-variables()
    "Use Autoflake to remove unused function"
    "autoflake --remove-all-unused-imports -i unused_imports.py"
    (interactive)
    (shell-command
     (format "%s --remove-unused-variables -i %s"
             python-autoflake-path
             (shell-quote-argument (buffer-file-name))))
    (revert-buffer t t t))

#+end_src

#+RESULTS:
: python-remove-unused-imports


**** Configure black formatter for brunette
:PROPERTIES:
:ID:       a7799b15-ad9f-4ab0-b55a-5ea7c6ef14e7
:END:

# blacken-executable
# (setq blacken-executable "brunette")
# (setq blacken-executable "/home/audeering.local/cgeng/.venvs/py37-data/bin/brunette")

# (defvar python-autoflake-path
# (concat pyvenv-virtual-env-path-directories "brunette")
# )

- blacken-buffer will format the buffer
- customizations are better kept in pyproject.toml when using black itself,
- setup.cfg is interpreted by black

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package :ensure t)
  (use-package blacken
    ;; :ensure t
    ;; :ensure-system-package (black . "pip3 install black")
    :custom
    (blacken-executable "brunette")
    ;; (blacken-line-length 119)
    )

#+end_src
***** Links

****** Formatting providers in vscode

https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0

-  file->preferences->type "python formatting provider"
-  This gets put into ~/cgeng/.config/Code/User/settings.json
  "python.formatting.provider": "black"
- file->preferences->type "format on save"

-  configure black
-  https://dev.to/adamlombard/vscode-setting-line-lengths-in-the-black-python-code-formatter-1g62
  file->preferences->type "python formatting black args"
- --line-length 119
- 119 characters


**** Aggregate Function to clean up - not functioning


#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (defun python-cleanup-this-file ()
    "All cleaning actions run in chain..."
    (interactive)
    (blacken-buffer)
    (python-remove-unused-imports)
    (py-isort-buffer)
    (python-remove-unused-imports)
    )
#+end_src


**** Rst autocomplete
:PROPERTIES:
:ID:       59d7132f-71a6-45b0-88b8-a2f15e3952f2
:END:

https://github.com/tkf/auto-complete-rst

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (require 'auto-complete-rst)
  (auto-complete-rst-init)

  ;; specify other sources to use in rst-mode
  (setq auto-complete-rst-other-sources
        '(ac-source-filename
          ac-source-abbrev
          ac-source-dictionary
          ac-source-yasnippet))
#+end_src



**** defconst line width - still needed?

#+begin_src emacs-lisp :tangle ./el/setup-python.el :mkdirp yes
  (defconst python-linewidth 89)
#+end_src

**** coverage

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (require 'pycoverage)


  (defun my-coverage ()
    (interactive)
    (when (derived-mode-p 'python-mode)
      (progn
        ;; (linum-mode)
        (pycoverage-mode))))
#+end_src


**** Flyckeck Attempt to use Pylint

https://www.flycheck.org/en/28/_downloads/flycheck.html#Configuring-checkers
https://stackoverflow.com/questions/37720869/emacs-how-do-i-set-flycheck-to-python-3



#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes


  ;; (add-hook 'flycheck-mode-hook #'flycheck-virtualenv-setup)
  (defun flycheck-python-setup ()
    (flycheck-mode)
    )
  ;; (add-hook 'python-mode-hook #'flycheck-python-setup)
#+end_src


#+begin_src emacs-lisp :tangle no :noweb yes
  (org-babel-tangle)
  (load-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:
: t



**** python-lsp-server specific

https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/
https://github.com/python-lsp/python-lsp-server
https://github.com/emacs-lsp/lsp-mode/issues/2777
https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/

pip install 'python-lsp-server[all]'

pip install 'python-lsp-server[websockets]'

#+begin_src emacs-lisp :tangle ./el/setup-python.el :mkdirp yes

(use-package lsp-mode
  :ensure t
  :config

  ;; make sure we have lsp-imenu everywhere we have LSP
  (require 'lsp-imenu)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  ;; get lsp-python-enable defined
  ;; NB: use either projectile-project-root or ffip-get-project-root-directory
  ;;     or any other function that can be used to find the root directory of a project
  (lsp-define-stdio-client lsp-python "python"
                           #'projectile-project-root
                           '("pyls"))

  ;; make sure this is activated when python-mode is activated
  ;; lsp-python-enable is created by macro above
  (add-hook 'python-mode-hook
            (lambda ()
              (lsp-python-enable)))

  ;; lsp extras
  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  ;; NB: only required if you prefer flake8 instead of the default
  ;; send pyls config via lsp-after-initialize-hook -- harmless for
  ;; other servers due to pyls key, but would prefer only sending this
  ;; when pyls gets initialised (:initialize function in
  ;; lsp-define-stdio-client is invoked too early (before server
  ;; start)) -- cpbotha
  (defun lsp-set-cfg ()
    (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
      ;; TODO: check lsp--cur-workspace here to decide per server / project
      (lsp--set-configuration lsp-cfg)))

  (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))

  ;; (require 'lsp-pylsp)
#+end_src

**** Pyright specific code

https://emacs-lsp.github.io/lsp-pyright/

Note: ~lsp-python-ms~ might be loaded with precedence and should be UNINSTALLED in orde to get this working!

Should become =:tangle no= when removed.

#+begin_src emacs-lisp :tangle no :mkdirp yes

  (use-package python-mode
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (require 'highlight-indent-guides)
                           (require 'sphinx-doc)
                           (sphinx-doc-mode t)
                           (highlight-indent-guides-mode -1)
                           (auto-fill-mode)
                           (flycheck-python-setup)
                           (set-fill-column python-linewidth)
                           ;;(highlight-indent-guides-mode)
                           ;; (importmagic-mode)
                           (lsp-deferred)
                           ;; (yapf-mode)
                           (lsp-treemacs)
                           )
                       )
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    ;; should be .dir-local:
    ;; (lsp-pyright-venv-path "~/.venvs/py37")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python)
    ;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
    )


  (setq lsp-enable-file-watchers nil)
  (setq lsp-file-watch-threshold 2000)

  (setq lsp-pyright-auto-import-completions t)
  ;;  Determines whether pyright automatically adds common search paths.
  ;; i.e: Paths like "src" if there are no execution environments defined in the
  ;; config file.
  (setq lsp-pyright-auto-search-paths t)
  (setq lsp-pyright-log-level "trace")

  (require 'dap-python)

  ;; (lsp-client-settings)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    ;; :bind (:map company-active-map
    ;;        ("<tab>" . company-complete-selection))
    ;;       (:map lsp-mode-map
    ;;        ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src




**** Virtual Environments
#+begin_src emacs-lisp :tangle ./el/setup-python.el :mkdirp yes
  (use-package pyvenv
    :config
    (pyvenv-mode 1)
    ;; (setq pyvenv-workon "py37")  ; Default venv
    (pyvenv-tracking-mode 1)
    )  ; Automatically use pyvenv-workon via dir-locals

#+end_src

**** Footer

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (provide 'setup-python)

  ;;; setup-python-lsp-python ends here

#+end_src


#+begin_src emacs-lisp
  ;; not  lsp
  ;; (require 'setup-python-elpy-jedi)   ;; was the old setup-python.el
  ;; (require 'setup-python-lsp-emacs-from-scratch)
  ;; (require 'setup-python-pyright)
  ;; (require 'setup-python-lsp-pyright)
  ;; now: Alays write into setup-python and require so
  (require 'setup-python)
#+end_src

*** LSP SQL


#+begin_src emacs-lisp :tangle no :noweb yes
  (org-babel-tangle)
  (load-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:
: t


https://github.com/lighttiger2505/sqls

#+begin_src emacs-lisp :tangle no
  (add-hook 'sql-mode-hook 'lsp)
  (setq lsp-sqls-workspace-config-path nil)
  (setq lsp-sqls-connections
      '(
        ((driver . "sqlite3") (dataSourceName . "/home/audeering.local/cgeng/work/myfiles/bikerides/data/processed/db.sqlite3"))
        ;; ((driver . "mysql") (dataSourceName . "yyoncho:local@tcp(localhost:3306)/foo"))
        ;; ((driver . "mssql") (dataSourceName . "Server=localhost;Database=sammy;User Id=yyoncho;Password=hunter2;"))
        ;; ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=yyoncho password=local dbname=sammy sslmode=disable"))
        )
      )
#+end_src

#+RESULTS:
| (driver . sqlite3)    | (dataSourceName . /home/audeering.local/cgeng/work/myfiles/bikerides/data/processed/db.sqlite3)      |
| (driver . mysql)      | (dataSourceName . yyoncho:local@tcp(localhost:3306)/foo)                                             |
| (driver . mssql)      | (dataSourceName . Server=localhost;Database=sammy;User Id=yyoncho;Password=hunter2;)                 |
| (driver . postgresql) | (dataSourceName . host=127.0.0.1 port=5432 user=yyoncho password=local dbname=sammy sslmode=disable) |


*** Other LSP Languages

:PROPERTIES:
:ID:       3fff27c7-73a4-4dfa-833a-86903c2d8d0b
:END:

#+begin_src emacs-lisp

  (require 'setup-typescript)
  (require 'setup-angular)
  (require 'setup-c-lsp-clangd)
  ;; (require 'setup-c++)
  ;; (require 'setup-python-lsp-remember-you)

  (eval-after-load 'whitespace '(require 'setup-whitespace))
  (eval-after-load 'tramp '(require 'setup-tramp))
  ;; (require 'setup-perspective)
  ;; (require 'setup-ffip)
  ;; (require 'setup-paredit)

  (require 'mmm-auto)
  (mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

  (require 'setup-js2-mode)
  (require 'setup-web-mode)
  (require 'mmm-auto)
  (require 'setup-web-mode)
  (require 'setup-vue-mode)
#+end_src


*** R using ess
:PROPERTIES:
:ID:       f6b47430-8927-472c-99f9-dd3a7ce2cc4a
:END:

https://confunguido.github.io/blog/20190317_emacs_for_R.html
https://github.com/sejdemyr/.emacs.d/blob/master/init.el

#+begin_src emacs-lisp
(require 'setup-ess)
#+end_src


#+begin_src emacs-lisp  :tangle ./el/setup-ess.el :mkdirp yes

    ;;; setup-ess.el --- summary -*- lexical-binding: t -*-
  ;;
    ;;; Code:

  (message "Setting up ESS.")

;;; emacs speaks statistics
  (use-package ess
    :ensure t
    :init
    (require 'ess-site)
    )

  (provide 'setup-ess)
  ;;; setup-ess ends here


#+end_src


** Electric Pair Mode

#+begin_src emacs-lisp
  ;; see http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
  (electric-pair-mode 1)
#+end_src

** Single Other Mode Configurations

*** SQL code formatting


see https://github.com/purcell/sqlformat

#+begin_src emacs-lisp

  (setq sqlformat-command 'sqlformat)
  (setq sqlformat-args nil)

  ;; (setq sqlformat-command 'pgformatter)
  ;; (setq sqlformat-args '("-s2" "-g"))
#+end_src

#+RESULTS:

*** Json Files

#+begin_src emacs-lisp :tangle ./el/setup-json-mode.el :mkdirp yes
      ;;; setup-json-mode.el --- summary -*- lexical-binding: t -*-

    ;; Author: CGeng
    ;; Maintainer: CGeng
    ;; Version: version
    ;; Package-Requires: (dependencies)

    ;;; Commentary:

    ;; commentary

    ;;; Code:


      ;;; name.el ends here
    (add-hook 'json-mode-hook
              (lambda ()
                (make-local-variable 'js-indent-level)
                (setq js-indent-level 4)
                (flycheck-mode)
                )
              )


    (defun beautify-json ()
    "Make json formatting beautiful in selected region.
        Formats json region to be better readable by a human."
      (interactive)
      (let ((b (if mark-active (min (point) (mark)) (point-min)))
            (e (if mark-active (max (point) (mark)) (point-max))))
        (shell-command-on-region b e
                                 "python -m json.tool" (current-buffer) t)))


    (provide 'setup-json-mode)
    ;;; setup-json-mode.el ends here

#+end_src

** Org-Mode

*** org-roam

**** Getting Started with Org Roam - Build a Second Brain in Emacs*

https://www.youtube.com/watch?v=AyhPmypHDEw
https://systemcrafters.cc/build-a-second-brain-in-emacs/getting-started-with-org-roam/

**** Capturing notes efficiently

https://www.youtube.com/watch?v=YxgA5z2R08I&t=0s
https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/


**** Org Roam: The Best Way to Keep a Journal in Emacs

https://www.youtube.com/watch?v=3-sLBaJAtew&t=0s
https://systemcrafters.net/build-a-second-brain-in-emacs/keep-a-journal/


**** System Crafters Live! - Can You Apply Zettelkasten in Emacs?

https://www.youtube.com/watch?v=-TpWahIzueg
https://systemcrafters.net/live-streams/august-06-2021/

Video von Sönke Ahrens: https://www.youtube.com/watch?v=JnS3g68zCXw


*** Setting requiring main entry Point


==(load "org-capture-templates-slim")=  wird in =setup-org= geladen.
Dort wird die Browser Extension dann konfiguriert.

Default Values:

- selected template: p
- unselected template: L


My Values:

- selected template: op
- unselected template: oL


#+begin_src emacs-lisp
  (require 'setup-org) ;; organizer todo notes etc
#+end_src

*** Setting up org-general
**** Main Blob
#+begin_src emacs-lisp  :tangle ./el/org-general.el :mkdirp yes
;; Enable org-mode
(require 'org)

;; For encrypting files
(require 'org-crypt)

;; For template expansion
;; https://www.reddit.com/r/orgmode/comments/7jedp0/easy_templates_expansion_not_working/
(require 'org-tempo)

;; Remove trailing whitespace
(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

;; Enable intelligent text wrapping
(add-hook 'org-mode-hook
          (lambda ()
            (visual-line-mode)
            (adaptive-wrap-prefix-mode)))

;; Prevent extra spaces from showing up after headings
(setq org-cycle-separator-lines 0)

;; Enable syntax-highlighting
(setq org-src-fontify-natively t)

;;;; Export Options

;; Disable subscripts on export
(setq org-export-with-sub-superscripts nil)

;; Disable table of contents on export
(setq org-export-with-toc nil)

;; Export drawers
;; (setq org-export-with-drawers t)

;; Export to clipboard to paste in other programs
(defun my/org-export-region-html ()
  "Export region to HTML, and copy it to the clipboard."
  (interactive)
  (save-window-excursion
    (let* ((buf (org-export-to-buffer 'html "*Formatted Copy*" nil t nil t))
           (html (with-current-buffer buf (buffer-string))))
      (with-current-buffer buf
        (shell-command-on-region
         (point-min)
         (point-max)
         "clip"))
      (kill-buffer buf))))

;; Shortcuts
;; (global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(define-key org-mode-map "\C-cv" 'org-reveal)
(define-key org-mode-map "\C-cn" 'org-next-link)
(define-key org-mode-map "\C-cp" 'org-property-action)

;; Property inheritance
(setq org-use-property-inheritance nil)

;; Tag inheritance
(setq org-use-tag-inheritance nil)

;; Use global IDs
(require 'org-id)
(setq org-id-link-to-org-use-id t)

;; Update ID file .org-id-locations on startup
(org-id-update-id-locations)

;; Add ID properties to all headlines in the current file which do not already have one
(defun my/org-add-ids-to-headlines-in-file ()
  (interactive)
  (org-map-entries 'org-id-get-create))

;; Uncomment to enable writing IDs to all org entries before saving
;; (add-hook 'org-mode-hook
;;  (lambda ()
;;    (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))


;; Org-refile

;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes t)

;; Add previous heading to refile note automatically
(defun my/org-refile-with-note-parent-link ()
  "Wrapper for `org-refile' which automatically adds the previous
parent org-link to the note in the form \"From [[id:hash][Heading]].\"

Requires `org-log-refile' to be set to 'note."
  (interactive)
  ;; (if (equal current-prefix-arg '(4))
  ;;    (org-refile)
    (save-excursion
      (let ((start-level (funcall outline-level)))
        (if (<= start-level 1)
            ;; Remember that org-make-link-string exists
            (push (list (buffer-file-name)
                        (file-name-nondirectory (buffer-file-name)))
                  org-stored-links)
          (progn
            (outline-up-heading 1 t)
            (call-interactively 'org-store-link)))))
    (org-refile)
    (with-simulated-input "RET RET"
      (org-insert-link))
    (insert ".")
    (beginning-of-line nil)
    (insert "From ")
    (org-ctrl-c-ctrl-c))

(define-key org-mode-map "\C-c\C-w" 'my/org-refile-with-note-parent-link)

;; ;; Has not been implemented for org-agenda-mode-map
;; (define-key org-agenda-mode-map "\C-c\C-w" 'my/org-refile-with-note-parent-link)

(defun my/org-copy-outline-path ()
  "Function to copy outline path of current org-item (agenda or file) to clipboard."
  (interactive)
  (let ((m (org-get-at-bol 'org-marker)))
    (kill-new (replace-regexp-in-string "//" "/" (org-with-point-at m (org-display-outline-path t t "/" nil))))))

(define-key org-mode-map "\C-co" 'my/org-copy-outline-path)

;; Collapse plain lists
(setq org-cycle-include-plain-lists 'integrate)

;; Change and freeze time
(defun my/freeze-time (&optional freeze-time-time)
  "Freeze `current-time' at the current active or inactive timestamp. If point
is not on a timestamp, the function prompts for one. If time is not specified,
either by the timstamp under point or prompt, the time defaults to the
current HH:MM of today at the selected date."
  (interactive)
  (let ((time
         (cond
          ((if (boundp 'freeze-time-time)
               freeze-time-time))
          ((if (org-at-timestamp-p 'lax) t)
           (match-string 0))
          (t
           (org-read-date t nil nil "Input freeze time:")))))
    (eval (macroexpand
           `(defadvice current-time (around freeze activate)
              (setq ad-return-value ',
                    (append (org-read-date nil t time) '(0 0))))))
    (set-face-background 'fringe "firebrick2")))

(global-set-key "\C-cf" 'my/freeze-time)

;; Release changed / frozen time
(defun my/release-time ()
  "Release the time frozen by `freeze-time'."
  (interactive)
  (if (advice--p (advice--symbol-function 'current-time))
      (progn
        (ad-remove-advice 'current-time 'around 'freeze)
        (ad-activate 'current-time)
        (set-face-background 'fringe nil))
    (message "Time is not currently frozen")))

(global-set-key "\C-cr" 'my/release-time)

;; Change time-stamp increments to 1 minute
(setq org-time-stamp-rounding-minutes '(0 1))

;; Re-define org-switch-to-buffer-other-window to NOT use org-no-popups.
;; Primarily for compatibility with shackle.
(defun org-switch-to-buffer-other-window (args)
  "Switch to buffer in a second window on the current frame.
In particular, do not allow pop-up frames.
Returns the newly created buffer.

Redefined to allow pop-up windows."
  ;;  (org-no-popups
  ;;     (apply 'switch-to-buffer-other-window args)))
  (switch-to-buffer-other-window args))

;; Org-toggle-latex-fragment options

;; Make text bigger
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

;; Semi-center equations by moving number to the right using [leqno]
(setq org-format-latex-header "\\documentclass[reqno]{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}")

;; Go to the next indented paragraph when currently in a bulleted list.
(defun my/org-next-paragraph ()
  (interactive)
  (move-end-of-line nil)
  (org-return)
  (org-return)
  (org-return)
  (indent-for-tab-command nil)
  (org-cycle nil)
  (org-self-insert-command 1)
  (beginning-of-visual-line 1)
  (previous-line 1 1)
  (delete-forward-char 1 nil)
  (end-of-visual-line 1)
  (org-delete-backward-char 1))

(define-key org-mode-map "\C-ci" 'my/org-next-paragraph)

;; Add note on property change
(add-to-list 'org-log-note-headings
             '(property . "Property %-12s from %-12S %t"))

(defcustom my/org-property-ignored-properties
  '("ID" "LAST_REPEAT" "Via" "ARCHIVE_TIME" "ARCHIVE_FILE" "ARCHIVE_OLPATH" "ARCHIVE_CATEGORY" "ARCHIVE_TODO" "Effort" "EFFORT" "NOTER_DOCUMENT" "NOTER_PAGE")
  "List of properties to exclude from my/org-property-change-note."
  :group 'org
  :type 'list)

(defun my/org-property-store-previous-val (property)
  "Store previous property value prior to modifying it with `org-property-action'."
  (setq my/org-property-previous-val
        (org-entry-get nil property)))

(advice-add #'org-read-property-value :before #'my/org-property-store-previous-val)

(defun my/org-property-change-note (prop val)
;;   "Add property changes to the logbook. Requires modifying `org-add-log-note'
;; to include:

;; ((eq org-log-note-purpose 'property)
;;  (format \"\\\"%s\\\" property change from \\\"%s\\\"\"
;;          (or org-log-note-state \"\")
;;          (or org-log-note-previous-state \"\")))

;; or replacing the entire cond block with:

;; (cond
;;  ((member org-log-note-purpose (mapcar 'car org-log-note-headings))
;;   \"changing property\")
;;  (t (error \"This should not happen\")))

;; and byte compiling org.el."
  (message (concat "Changing " prop " from " val))
  (if (not 'my/org-property-previous-val)
      (if (not (member prop my/org-property-ignored-properties))
      (org-add-log-setup 'property prop my/org-property-previous-val))))

;; In the interim, I've just re-defined the function
(defun org-add-log-note (&optional _purpose)
  "Pop up a window for taking a note, and add this note later."
  (remove-hook 'post-command-hook 'org-add-log-note)
  (setq org-log-note-window-configuration (current-window-configuration))
  (delete-other-windows)
  (move-marker org-log-note-return-to (point))
  (pop-to-buffer-same-window (marker-buffer org-log-note-marker))
  (goto-char org-log-note-marker)
  (org-switch-to-buffer-other-window "*Org Note*")
  (erase-buffer)
  (if (memq org-log-note-how '(time state))
      (org-store-log-note)
    (let ((org-inhibit-startup t)) (org-mode))
    (insert (format "# Insert note for %s.
# Finish with C-c C-c, or cancel with C-c C-k.\n\n"
                    (cond
                     ((eq org-log-note-purpose 'clock-out) "stopped clock")
                     ((eq org-log-note-purpose 'done)  "closed todo item")
                     ((eq org-log-note-purpose 'state)
                      (format "state change from \"%s\" to \"%s\""
                              (or org-log-note-previous-state "")
                              (or org-log-note-state "")))
                     ((eq org-log-note-purpose 'reschedule)
                      "rescheduling")
                     ((eq org-log-note-purpose 'delschedule)
                      "no longer scheduled")
                     ((eq org-log-note-purpose 'redeadline)
                      "changing deadline")
                     ((eq org-log-note-purpose 'deldeadline)
                      "removing deadline")
                     ((eq org-log-note-purpose 'refile)
                      "refiling")
                     ((eq org-log-note-purpose 'note)
                      "this entry")
                     ((eq org-log-note-purpose 'property)
                      (format "\"%s\" property change from \"%s\""
                              (or org-log-note-state "")
                              (or org-log-note-previous-state "")))
                     (t (error "This should not happen")))))
    (when org-log-note-extra (insert org-log-note-extra))
    (setq-local org-finish-function 'org-store-log-note)
    (run-hooks 'org-log-buffer-setup-hook)))

(add-hook 'org-property-changed-functions 'my/org-property-change-note)

(defun my/org-link-copy (&optional arg)
  "Copy the entire org-link (link and description) at point and put it on the killring.
With prefix C-u, just copy the org-link link."
  (interactive "P")
  (when (org-in-regexp org-bracket-link-regexp 1)
    (if (null arg)
        (let ((link (match-string-no-properties 0)))
          (kill-new link)
          (message "Copied link: %s" link))
      (let ((link (org-link-unescape (match-string-no-properties 1))))
        (kill-new link)
        (message "Copied link: %s" link)))))

(define-key org-mode-map "\C-ch" 'my/org-link-copy)

;; Add ability to move forward by timestamp
(setq my/org-timestamp-search-failed nil)

;; Note: Need to advise org-context since exiting the logbook doesn't collapse it.
(defun my/org-next-timestamp (&optional search-backward)
  "Move forward to the next timestamp.
If the timestamp is in hidden text, expose it."
  (interactive "P")
  (when (and my/org-timestamp-search-failed (eq this-command last-command))
    (goto-char (point-min))
    (message "Timestamp search wrapped back to beginning of buffer"))
  (setq my/org-timestamp-search-failed nil)
  (let* ((pos (point))
         (ct (org-context))
         (a (assq :timestamp ct))
         (srch-fun (if search-backward 're-search-backward 're-search-forward)))
    (cond (a (goto-char (nth (if search-backward 1 2) a)))
          ((looking-at org-element--timestamp-regexp)
           ;; Don't stay stuck at timestamp without an org-link face
           (forward-char (if search-backward -1 1))))
    (if (funcall srch-fun org-element--timestamp-regexp nil t)
        (progn
          (goto-char (match-beginning 0))
          (when (org-invisible-p) (org-show-context)))
      (goto-char pos)
      (setq my/org-timestamp-search-failed t)
      (message "No further timestamps found"))))

(define-key org-mode-map "\C-ct" 'my/org-next-timestamp)

(defun my/org-timestamp-convert-dirty-regexp-hack ()
  "Convert all org-mode timestamps in buffer from the
form <2019-01-04 08:00-10:00> to <2019-01-04 08:00>--<2019-01-04 10:00>"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "<\\([0-9- A-z]\\{15\\}\\)\\([0-9]\\{2\\}:[0-9]\\{2\\}\\)-\\([0-9]\\{2\\}:[0-9]\\{2\\}\\)>" nil t)
    (replace-match "<\\1\\2>--<\\1\\3>" t nil)))

;; Have dired store org-link when a file or files(s) are renamed
(defun my/dired-rename-file (file newname ok-if-already-exists)
  "Store org-link to the renamed file."
  (push (list newname (file-name-nondirectory newname)) org-stored-links))

(advice-add #'dired-rename-file :after #'my/dired-rename-file)

;; Org-mode Priorities
;; Default highest is 65 (A)
;; Default default is 66 (B)
;; Default lowest is 65 (C)
;; Default should be "C" - two levels of priority should be enough
(setq org-default-priority 67)

;; Insert Capture Template At End of Current
(defun my/org-capture-after-current ()
  (interactive)
  (org-insert-heading-after-current)
  (kill-line -1)
  (org-return)
  (delete-forward-char 1)
  ;; This doesn't work for some reason
  ;; (let ((current-prefix-arg (digit-argument 0)))
  ;;   (call-interactively #'org-capture)))
  (execute-kbd-macro (read-kbd-macro "C-u 0 C-c c")))

(defun my/org-backup-files ()
  "Create backup of entire org-mode directory in the archive directory. I really need to start
using git for this instead."
  (interactive)
  (let* ((date-time (format-time-string "%Y-%m-%d %H.%M.%S"))
         (org-backup-directory
          (concat (cdr (assoc "val" org-link-abbrev-alist)) "org/Archive/" date-time)))
    (copy-directory org-directory org-backup-directory)
    (message "%s" (concat org-directory " copied to " org-backup-directory "!"))))

#+end_src




**** Electric Pair Tweak

see https://emacs.stackexchange.com/questions/2538/how-to-define-additional-mode-specific-pairs-for-electric-pair-mode

#+begin_src emacs-lisp :tangle ./el/org-general.el :mkdirp yes :a
;; (defvar org-electric-pairs '((?/ . ?/) (?= . ?=)) "Electric pairs for org-mode.")
(defvar org-electric-pairs '((?/ . ?/) (?= . ?=) (?~ . ?~)) "Electric pairs for org-mode.")

  (defun org-add-electric-pairs ()
    (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
    (setq-local electric-pair-text-pairs electric-pair-pairs))

  (add-hook 'org-mode-hook 'org-add-electric-pairs)
#+end_src


#+begin_src emacs-lisp :tangle no :noweb yes
  (org-babel-tangle)
  (load-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:
: t




*** org-capture-extension

https://github.com/sprig/org-capture-extension


#+begin_src bash :results output pp
ls -l "${HOME}/.local/share/applications/" | grep org
#+end_src

#+RESULTS:
: -rw-r--r-- 1 cgeng domain users 145 Nov 22 16:15 org-protocol.desktop

#+begin_src bash :results output pp
  cat > "${HOME}/.local/share/applications/org-protocol.desktop" << EOF
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
  EOF

  update-desktop-database ~/.local/share/applications/
#+end_src

#+RESULTS:

sudo update-desktop-database



** Collected Other Mode Configurations


#+begin_src emacs-lisp
  ;; (require 'setup-speedbar)

  ;; (eval-after-load 'sgml-mode '(require 'setup-html-mode))
  (eval-after-load 'lisp-mode '(require 'setup-lisp))

  (require 'setup-plantuml) ;; organizer todo notes etc

  (require 'setup-latex)

  (require 'setup-calendar)
  ;;(require 'setup-bash)
  (require 'setup-octave)
  ;; (require 'mc)

  ;;(require 'setup-web-mode)
  (require 'setup-jabber)
  (require 'setup-chat-tracking)
  ;; (eval-after-load 'ruby-mode '(require 'setup-ruby-mode))
  (eval-after-load 'clojure-mode '(require 'setup-clojure-mode))
  ;; (eval-after-load 'markdown-mode '(require 'setup-markdown-mode))
  ;;(require 'setup-pandoc)

  ;; Load slime-js when asked for
  ;; (autoload 'slime-js-jack-in-browser "setup-slime-js" nil t)
  ;; (autoload 'slime-js-jack-in-node "setup-slime-js" nil t)

  ;; Map files to modes
  (require 'mode-mappings)


  ;; (require 'expand-region)
  ;; (require 'mark-more-like-this)
  ;; (require 'inline-string-rectangle)
  ;;(require 'multiple-cursors)
  ;; (require 'delsel)
  ;; (require 'jump-char)
  ;; (require 'eproject)
  ;; (require 'wgrep)
  ;; (require 'smart-forward)
  ;; (require 'change-inner)
  ;; (require 'multifiles)


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Ansi Farben in compilation buffers:                                                                  ;;
  ;; Also hook:                                                                                           ;;
  ;; https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode                       ;;
  ;; Als Function:                                                                                        ;;
  ;; https://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun display-ansi-colors ()
    (interactive)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  ;; gehen alle nicht;
                                          ; (add-hook 'sbt-mode-hook 'display-ansi-colors)
  ;; (add-hook 'sbt-mode-hook 'ansi-color-for-comint-mode-on)
  ;; (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
  ;; (add-hook 'async-bytecomp-package-mode-hook 'colorize-compilation-buffer)

  ;; Fill column indicator
  ;; (require 'fill-column-indicator)

  ;; Browse kill ring
  (require 'browse-kill-ring)
  (setq browse-kill-ring-quit-action 'save-and-restore)

  (require 'setup-ibuffer)
  (require 'setup-doom-modeline)

  ;; (require 'setup-eclim)
  ;; This currently breaks dired icons. Why?
  ;; (require 'setup-scala)
  (require 'setup-treemacs)
  (require 'setup-groovy)
  ;; (require 'setup-eclim)

  ;; Misc
  ;; (require 'appearance)

  ;; (diminish 'eldoc-mode)
  ;; (diminish 'paredit-mode)

  ;; Elisp go-to-definition with M-. and back again with M-,
  ;; (autoload 'elisp-slime-nav-mode "elisp-slime-nav")
  ;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t) (eldoc-mode 1)))
  ;; (eval-after-load 'elisp-slime-nav '(diminish 'elisp-slime-nav-mode))

  ;; Email, baby
  ;; (require 'setup-mule)

  ;; Run at full power please
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  (put 'scroll-left 'disabled nil)


  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...

  ;;(add-to-list 'load-path "/path/to/downloaded/openwith.el")
  ;;./elpa/openwith-20120531.1436/openwith.el:1

  ;; ("\\.pdf\\'"  "okular" (file))

  (require 'openwith)
  (setq openwith-associations '(
                                ("\\.mp4\\'"  "vlc" (file))
                                ("\\.docx\\'" "lowriter" (file))
                                ("\\.odt\\'"  "lowriter" (file))
                                ("\\.pptx\\'"  "loimpress" (file))
                                ))
  ;; unset associations altogether
  ;; (setq openwith-associations '())

  (openwith-mode)
  (display-battery-mode)
  (setq require-final-newline t)

  (require 'setup-nxml)
  ;; (require 'setup-pdf-tools)
  (require 'setup-json-mode)
  (require 'setup-magit)
  ;; (require 'setup-tags)

  (require 'setup-flycheck-mode)
  ;; company mode autocompletion
  ;;(add-hook 'after-init-hook 'global-company-mode)

  ;;(require 'pasc-mode)

  (require 'setup-yasnippet)

  ;; (require 'setup-supercollider)
  (require 'setup-yaml-mode)
  (require 'setup-editorconfig)
  (require 'setup-rtags)
  (require 'setup-treemacs)

  (require 'setup-shell-scripting)

  (require 'calfw)
  (require 'calfw-gcal)
  (require 'calfw-org)
  (require 'calfw-gcal)
  (require 'calfw-ical)
  (require 'setup-user-menu)

  (put 'erase-buffer 'disabled nil)

  ;; fix misalignment in popus:
  (setq popup-use-optimized-column-computation nil)

  (add-hook 'makefile-mode-hook 'makefile-executor-mode)

#+end_src

**** Shell prompt


***** Recommendations
:PROPERTIES:
:ID:       ad5cc4be-3a56-4208-90e3-173b17837c02
:END:

https://stackoverflow.com/questions/12224909/is-there-a-way-to-get-my-emacs-to-recognize-my-bash-aliases-and-custom-functions/12229404#12229404

#+begin_src emacs-lisp :tangle no
  ;; ->  make  all  envs  visible in  also org mode
  (setq shell-file-name "bash")
  (setq shell-command-switch "-ic")
#+end_src

- The solution is to leave the shell-command-switch variable at its default value, which is just -c.
https://emacs.stackexchange.com/questions/3447/cannot-set-terminal-process-group-error-when-running-bash-script

#+begin_src emacs-lisp
  (setq shell-file-name "bash")
  (setq shell-command-switch "-c")
#+end_src



**** safe local variables
:PROPERTIES:
:ID:       7a719b5d-aa8c-4110-9859-5aea715e044b
:END:

#+begin_src emacs-lisp

  ;; - '(safe-local-variable-values '((testvar\  . "hello")))
  ;; + '(safe-local-variable-values
  ;; +   '((pyvenv-activate . "~/.venvs/py37/")
  ;; +     (testvar\  . "hello")))
  ;;   '(sql-connection-alist
  ;;     '(("dataupload local container mysql"

  ;; (put 'pyvenv-activate 'safe-local-variable (lambda (_) t))

  ;; projectile-project-test-cmd :

  (put 'pyvenv-activate 'safe-local-variable (lambda (_) t))
  (put 'projectile-project-test-cmd 'safe-local-variable (lambda (_) t))
  (put 'py-pythonpath  'safe-local-variable (lambda (_) t))


#+end_src


**** fix missing alt-key in WSL
:PROPERTIES:
:ID:       52d2df23-c894-4ce0-b82b-1023c29e4483
:END:

WSL for Windows specific code

#+begin_src emacs-lisp
  (setq x-alt-keysym 'meta)
  (put 'set-goal-column 'disabled nil)
#+end_src


** Misc
:PROPERTIES:
:ID:       d7d9d2b8-5c98-4fe9-bab5-d0c725bf3911
:END:

*** Local Defuns
:PROPERTIES:
:ID:       8ee4a7b9-f9e7-422e-8c04-3c17a61da460
:END:

#+begin_src emacs-lisp
  (defun edit-current-file-as-root ()
    "Edit the file that is associated with the current buffer as root"
    (interactive)
    (if (buffer-file-name)
        (progn
          (setq file (concat "/sudo:localhost:" (buffer-file-name)))
          (find-file file))
      (message "Current buffer does not have an associated file.")))
#+end_src

*** Imenu auto
:PROPERTIES:
:ID:       820994eb-2700-428a-a80b-d5e0ede6299d
:END:
#+begin_src emacs-lisp

  ;; add Imenu whenever possible.
  ;; see https://www.emacswiki.org/emacs/ImenuMode for documentation
  (defun try-to-add-imenu ()
    (condition-case nil (imenu-add-to-menubar "Index") (error nil)))
  (add-hook 'font-lock-mode-hook 'try-to-add-imenu)

#+end_src


*** Visible Bell off
:PROPERTIES:
:ID:       4b5650ad-478a-4c5e-8120-c56375abf02a
:END:

:PROPERTIES:
:ID:       6d9c48b7-0c81-4a42-a7f0-dfe149934fb2
:END:
#+begin_src emacs-lisp
  (setq visible-bell t)
  ;; ring-bell function not doing what its supposed to?
  ;; see https://www.emacswiki.org/emacs/AlarmBell
  ;; (defun ring-bell-function()
  ;;   "do not ring the bell when cursor has gone too far outside."
  ;;   (message "Went outside but not ringing the bell.")
  ;;     )
#+end_src

*** Ansible Vault Mode


#+begin_src emacs-lisp

  (setq ansible-vault-password-file "~/.ansible/vault_pass.txt")
  (add-to-list 'auto-mode-alist '("/encrypted$" . yaml-mode))

  (defun ansible-vault-mode-maybe ()
    (when (ansible-vault--is-encrypted-vault-file)
      (ansible-vault-mode 1)))

  (use-package ansible-vault
    :init (add-hook 'yaml-mode-hook 'ansible-vault-mode-maybe))

#+end_src

#+RESULTS:


*** Auth Source

- https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Pass.org
- https://www.youtube.com/watch?v=nZ_T7Q49B8Y


(add-to-list 'auth-sources (joindirs org-directory "Notes.org.gpg")) ;; not parseable by authinfo
(find-file (joindirs org-directory "Notes.org.gpg"))



(defun delete-nth (index seq)
"Delete the INDEX th element of SEQ.
Return result sequence, SEQ __is__ modified."
(if (equal index 0)
(progn
(setcar seq (car (cdr seq)))
(setcdr seq (cdr (cdr seq))))
(setcdr (nthcdr (1- index) seq) (nthcdr (1+ index) seq))))

(delete-nth 0 auth-sources)

(add-to-list 'auth-sources (joindirs org-directory ".authinfo.gpg")) ;; not parseable
(mapc 'message auth-sources)

(find-file (joindirs org-directory ".authinfo.gpg"))
(find-file (joindirs org-directory "Notes.org.gpg")) ;; no need to add to auth sources as not parseable
(auth-source-search :site "kaufland.de")
(auth-source-search :site "real.de")


#+begin_src emacs-lisp :tangle no :noweb yes
  (mapc 'message auth-sources)
#+end_src

#+RESULTS:
| ~/.authinfo | ~/.authinfo.gpg | ~/.netrc |

(auth-source-search :site  "arts-outdoors")
(auth-source-search :site  "arts-outdoors")

https://www.arts-outdoors.de

(auth-source-search :host "real.de")
(auth-source-search :machine "mailprovider.com")

(find-file (joindirs org-directory ".authinfo.gpg"))
(auth-source-forget-all-cached)
(find-file "~/.authinfo.gpg")
(mapc 'message auth-sources)

**** Generate Key

#+begin_example shell
gpg --full-generate-key
#+end_example

- use rsa
- size: 4096
- never expires
- Real Name
- Email
- PassPhrase

#+begin_src shell :tangle no :noweb yes :results output raw
  gpg --list-keys
  # these should be in
  ls -t ~/.gnupg/
  ls -t ~/.gnupg/private-keys-v1.d -la
#+end_src

#+RESULTS:
/home/christian/.gnupg/pubring.kbx
----------------------------------
pub   rsa4096 2021-08-21 [SC]
B6791609BBC1CD7C000F17E75921C10409567BCA
uid           [ultimate] Christian Geng (my default key for storing encrypted passwords) <christian.c.geng@gmail.com>
sub   rsa4096 2021-08-21 [E]

random_seed
trustdb.gpg
openpgp-revocs.d
pubring.kbx
private-keys-v1.d
pubring.kbx~
total 8
-rw------- 1 christian christian 2056 Aug 21 13:00 3F10E5FB10073217E078BDB9F1043D5B7DD785EF.key
-rw------- 1 christian christian 2056 Aug 21 13:00 676E806C8E7D02199000B22A4B86BFDBEAF035A6.key
/home/christian/.gnupg/pubring.kbx
----------------------------------
pub   rsa4096 2021-08-21 [SC]
B6791609BBC1CD7C000F17E75921C10409567BCA
uid           [ultimate] Christian Geng (my default key for storing encrypted passwords) <christian.c.geng@gmail.com>
sub   rsa4096 2021-08-21 [E]

trustdb.gpg
openpgp-revocs.d
pubring.kbx
private-keys-v1.d
pubring.kbx~

#+begin_src shell :tangle no :noweb yes :results output raw
  # Check if gpg-agent is already running
  grep gpg-agent
  # If it's not running, you can start it up with this command:
  gpg-connect-agent /bye
#+end_src

#+RESULTS:
22957

**** Migrate key to other maschine

gpg --list-secret-keys christian.c.geng@gmail.com

gpg --export-secret-keys YOUR_ID_HERE > private.key
gpg --import private.key



**** Lookup key


(defun efs/lookup-password (&rest keys)
(let ((result (apply #'auth-source-search keys)))
(if result
(funcall (plist-get (car result) :secret))
nil)))


**** Migrate key to other machine

Identify your private key:

gpg --list-secret-keys user@email.com

#+begin_example
pub   rsa4096 2021-08-21 [SC]
      <KEY ID DES SCHLÜSSELS>
uid           [ultimate] Christian Geng (my default key for storing encrypted passwords) <christian.c.geng@gmail.com>
sub   rsa4096 2021-08-21 [E]
#+end_example

Export key

gpg --export-secret-keys <KEY ID DES SCHLÜSSELS> > private.key

Copy Key to other machine (e.g. using scp)

import

gpg --import private.key

Enigmail / GnuPG v2
Note that you probably also have gpg2 on your system which is backwards-compatible with gpg, but seems to manage a separate list of keys. When using Thunderbird with Enigmail, note that it uses version 2 and may be unable to see your private key after importing. To fix that, run

COPY
gpg2 --import private.key


*** Mac Specific
:PROPERTIES:
:ID:       7ef44450-4c70-4117-8a72-44d99a0138e3
:END:
#+begin_src emacs-lisp
  ;; Are we on a mac?
  (setq is-mac (equal system-type 'darwin))
  ;; Setup environment variables from the user's shell.
  (when is-mac (exec-path-from-shell-initialize))
  ;; (when is-mac (require 'mac))

#+end_src

*** calibredb
:PROPERTIES:
:ID:       632883c3-8739-4a79-bab9-87bc587dc8af
:END:


#+begin_src emacs-lisp

  (require 'calibredb)
  (setq calibredb-root-dir "/D/Calibre_Science/")
  (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))

  ;;(setq calibredb-root-dir "~/OneDrive/Doc/Calibre")
  ;;(setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))

#+end_src

#+RESULTS:
: /D/Calibre_Science/metadata.db



*** Ascidoctor

Link collection here:

https://www.emacswiki.org/emacs/AsciiDoc

**** Adoc Snippets

git@github.com:nicorikken/adoc-mode-yasnippet.git

see in snippets

**** open adoc files
:PROPERTIES:
:ID:       8ebfb281-87fd-49f7-b513-19a4c3b0b492
:END:

#+begin_src emacs-lisp
  (require 'adoc-mode)
  (add-to-list 'auto-mode-alist '("\.adoc$" . adoc-mode))
  ;;  (add-to-list adoc-mode '("\\.adoc\\'" . adoc-mode))
  (autoload 'adoc-mode "adoc-mode" nil t)
#+end_src

#+RESULTS:

**** adoc mode preview
:PROPERTIES:
:ID:       8f6ef9ec-ffa0-4e07-90c0-37f08216106a
:END:

#+begin_src emacs-lisp
  (defun rcd-command-output-from-input (program input &rest args)
    "Returns output from PROGRAM INPUT with optional ARGS"
    (let* ((output (with-temp-buffer
                     (insert input)
                     (apply #'call-process-region nil nil program t t nil args)
                     (buffer-string))))
      output))

  (defun rcd-asciidoctor (string &rest args)
    (interactive)
    "Returns plain text from Markdown by using pandoc"
    (apply 'rcd-command-output-from-input "asciidoctor" string "-" args))

  (defun rcd-asciidoctor-preview ()
    "Preview asciidoctor"
    (interactive)
    (let* ((output (rcd-asciidoctor (buffer-string)))
           (file (concat (or (getenv "TMPDIR") "/tmp/") "asciidoctor.html")))
      (with-temp-file file (insert output))
      (browse-url file)))

  ;; (global-set-key (kbd "C-c a") 'rcd-asciidoctor-preview)
#+end_src

#+RESULTS:
: rcd-asciidoctor-preview

*** Org ascidoc
:PROPERTIES:
:ID:       59738c74-4023-4a75-8180-a424222ba95e
:END:

Org ascidoc exporter
Repo is here: git clone git@github.com:yashi/org-asciidoc.git

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el/org-asciidoc")
  (require 'ox-asciidoc)
#+end_src

#+RESULTS:
: ox-asciidoc

*** Always load .local_configs as shell script
:PROPERTIES:
:ID:       7bdb08dc-a901-4bab-912b-50271f3f6f76
:END:
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '(".local_configs" . shell-script-mode))
#+end_src

*** Emacs Server
:PROPERTIES:
:ID:       91011ca1-3a58-4d79-ba3a-21b27eb355b7
:END:

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src


*** dired


#+begin_src emacs-lisp
  (require 'setup-dired)
#+end_src


** Get Temperature

Shell Script to get get temperatures

# temperatures=$(cat /sys/class/thermal/thermal_zone*/temp  | tr '\n' '/')


** Web Server

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

** Supress always deleting trailing whitespace

None of these work yet.


#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'delete-trailing-whitespace nil t)
  (defun nuke_trailing ()
  (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))
(add-hook 'prog-mode-hook #'nuke_trailing)
#+end_src

#+RESULTS:
| nuke_trailing | nuke_traling | rainbow-delimiters-mode | editorconfig-major-mode-hook |

https://stackoverflow.com/questions/19174302/emacs-only-delete-trailing-whitespace-while-saving-in-programming-mode

* Misc
** Applications Config Example

*** Some App
:PROPERTIES:
:ID:       216fa964-a617-4a95-b3f4-3bd82856d8b1
:END:

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src emacs-lisp :tangle no :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src

#+begin_src emacs-lisp :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src
