PROPERTIES:
:ID:       19b31c0e-fc4c-406c-be79-3742680f8601
:END:
#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init-g.el :mkdirp yes

# M-x org-babel-tangle

* Tangle and Reload init file

#+begin_src emacs-lisp :tangle no :noweb yes
  (org-babel-tangle)
  (load-file "~/.emacs.d/init.el")
#+end_src

#+RESULTS:
: t



* Eearly Init - not needed?

https://www.masteringemacs.org/article/whats-new-in-emacs-27-1

However, if your init file changes the values of

- package-load-list
- or 'package-user-dir', or sets
- package-enable-at-startup to nil then


- You can move that code to the early init file (see above), so those
  settings apply before Emacs tries to activate the packages.
- You can use the new 'package-quickstart' so activation of packages
  does not need to pay attention to 'package-load-list' or
  'package-user-dir' any more.



* Init File
:PROPERTIES:
:ID:       214b3d62-1d24-46f8-a373-e3a9e665602d
:END:

** Coding System
:PROPERTIES:
:ID:       97c85ba1-ae76-4450-99a5-3ba469d4e46d
:END:

#+begin_src emacs-lisp

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8)

#+end_src




** Package and Load Process / Function Paths
:PROPERTIES:
:ID:       d201ac7f-645f-471b-9546-afef19448207
:END:

#+begin_src emacs-lisp

    ;; Setup packages
    ;; code obsolete in emacs27
    (if (version< emacs-version "27.1")
        (package-initialize)
      )

    (add-to-list 'load-path (expand-file-name "doom-snippets" user-emacs-directory))
    (add-to-list 'load-path "~/.emacs.d/el")
    (add-to-list 'load-path "~/.emacs.d/el-get/dired+")
    ;;(add-to-list 'load-path "~/.emacs.d/elpa/s-20210603.736/")



    (setq user-emacs-directory "~/.emacs.d/")
    (message user-emacs-directory)

    ;; Functions (load all files in defuns-dir)
    ;;(add-to-list 'load-path user-emacs-directory)
    (setq defuns-dir (expand-file-name "defuns" user-emacs-directory))
    (dolist (file (directory-files defuns-dir t "^[^.#].*el$"))
      (when (file-regular-p file)
        (load (file-name-sans-extension file))))
    ;; (load-library "cglispfuncs")

    ;;  (require 'title-time)
    ;; (require 'setup-daimler-proxy)
    ;; ;; No splash screen please ... jeez
    (setq inhibit-startup-message t)

    ;; Settings for currently logged in user
    ;; keep automatic customizations separately
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file 'noerror)

  ;; create user customization directory for specific username/hostname combination
  (defvar user-settings-dir)
  (setq user-settings-dir
        (joindirs user-emacs-directory "users" (concat user-login-name "-" (system-name) )))

  (mkdir user-settings-dir t)
  (add-to-list 'load-path user-settings-dir)

  ;; load all settings from user machine combination
  (when (file-exists-p user-settings-dir)
      (mapc 'load (directory-files user-settings-dir nil "^[^.#].*el$")))

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups" user-emacs-directory))))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; Save point position between sessions
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))

;; Setup elnode before packages to stop it from starting a server
;;(require 'setup-elnode)
;; Setup packages
(require 'setup-package)
;; Set path to dependencies
(setq site-lisp-dir
       (expand-file-name "site-lisp" user-emacs-directory))

;; Set up load path and
(add-to-list 'load-path site-lisp-dir)

;; Add external projects to load path
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project)
    (add-to-list 'load-path project)))

#+end_src


** Defaults: Coding System
:PROPERTIES:
:ID:       8e48bca6-9fb1-4ce2-8234-784594027423
:END:

#+begin_src emacs-lisp
  ;; Allow pasting selection outside of Emacs
  (setq x-select-enable-clipboard t)
  (setq x-select-enable-primary t)

  ;; Auto refresh buffers
  (global-auto-revert-mode 1)

  ;; Also auto refresh dired, but be quiet about it
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)

  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; Move files to trash when deleting
  (setq delete-by-moving-to-trash t)

  ;; Real emacs knights don't use shift to mark things
  (setq shift-select-mode nil)

  ;; Transparently open compressed files
  (auto-compression-mode t)

  ;; Enable syntax highlighting for older Emacsen that have it off
  (global-font-lock-mode t)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Frame titles which are short and informative
  (setq frame-title-format '("%b - Emacs"))

  ;; Show active region
  (transient-mark-mode 1)
  (make-variable-buffer-local 'transient-mark-mode)
  (put 'transient-mark-mode 'permanent-local t)
  (setq-default transient-mark-mode t)

  ;; Remove text in active region if inserting text
  (delete-selection-mode 1)

  ;; ;; Don't highlight matches with jump-char - it's distracting
  ;; (setq jump-char-lazy-highlight-face nil)

  ;; Always display line and column numbers
  (setq line-number-mode t)
  (setq column-number-mode t)

  ;; Lines should be 80 characters wide, not 72
  (setq fill-column 80)

  ;; Save a list of recent files visited. (open recent file with C-x f)
  (recentf-mode 1)
  (setq recentf-max-saved-items 100) ;; just 20 is too recent

  ;; Highlight matching parentheses when the point is on them.
  (show-paren-mode 1)

  ;; Undo/redo window configuration with C-c <left>/<right>
  (winner-mode 1)

  ;; Never insert tabs
  (setq-default indent-tabs-mode nil)

  ;; Show me empty lines after buffer end
  (setq-default indicate-empty-lines t)

  ;; Easily navigate sillycased words
  (global-subword-mode 1)

  ;; ;; Don't break lines for me, please
  ;; (setq-default truncate-lines t)

  ;; Keep cursor away from edges when scrolling up/down
  (require 'smooth-scrolling)
  ;; (setq scroll-step 1)
  ;; (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)

  ;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
  (setq org-replace-disputed-keys t)

  ;; Fontify org-mode code blocks
  (setq org-src-fontify-natively t)

  ;; Represent undo-history as an actual tree (visualize with C-x u)
  (setq undo-tree-mode-lighter "")
  (require 'undo-tree)
  (global-undo-tree-mode)

  ;; ;; Sentences do not need double spaces to end. Period.
  ;; (set-default 'sentence-end-double-space nil)

  ;; Add parts of each file's directory to the buffer name if not unique
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  ;; A saner ediff
  (setq ediff-diff-options "-w")
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
  ;; that you can always see what's happening.
  (setq eval-expression-print-level nil)

  ;; When popping the mark, continue popping until the cursor actually moves
  ;; Also, if the last command was a copy - skip past all the expand-region cruft.
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (when (eq last-command 'save-region-or-current-line)
        ad-do-it
        ad-do-it
        ad-do-it)
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  ;; don't try to raise windows when switching to a buffer, because this
  ;; fails in any sane tiling window manager
  (setq ido-default-file-method 'selected-window
        ido-default-buffer-method 'selected-window)

  ;; highlight the current line in all buffers
  (global-hl-line-mode 1)

(setq  realgud-safe-mode nil)

#+end_src

*** Show Line Numbers per Default, with some Exceptions
:PROPERTIES:
:ID:       fa826301-f5ae-4c2a-9280-84422f397ff0
:END:

#+begin_src emacs-lisp

(global-display-line-numbers-mode t)

;; Override some modes which derive from the above
(dolist (mode '(term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
(add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


** Programming
:PROPERTIES:
:ID:       10eecafe-1a33-4d5d-a162-6fc25c6f4791
:END:

*** Programming General
:PROPERTIES:
:ID:       da20042e-decb-467e-bae5-1f20bef5db7e
:END:

#+begin_src emacs-lisp
(require 'realgud)

(require 'setup-dired)
(require 'setup-wttrin)
(require 'setup-projectile)

;; Setup extensions
 (require 'setup-themes)
;; (eval-after-load 'ido '(require 'setup-ido)) ;; interactive break M-x
;; (eval-after-load 'dired '(require 'setup-python))

;; Setup lsp mode prior to setup-java
;; setup for lsp and dap
(require 'setup-auto-complete)

#+end_src

*** LSP
:PROPERTIES:
:ID:       b204e436-4dff-486d-8eac-8b32772d7574
:END:

-  often it is necessary to delete this file

  ~/.emacs.d/.lsp-session-v1


#+begin_src emacs-lisp
(require 'setup-lsp)
;; (require 'setup-java)
;; deactivate  jdee for  loading java files
  (setq auto-mode-alist
        (append '(("\\.java\\'" . java-mode)) auto-mode-alist))
(require 'setup-dap-mode)

#+end_src




*** LSP Python
:PROPERTIES:
:ID:       e06bb550-ccf7-4c8a-ba4d-c3d8343b4204
:END:

**** pyenv

https://github.com/pythonic-emacs/pyenv-mode
https://github.com/pyenv/pyenv

(pyenv-mode)
then run pyenv-mode-set

**** DAP Launching

#+begin_src emacs-lisp :tangle no
  ;; https://github.com/emacs-lsp/dap-mode/issues/202 DAP Breakpoints
  ;;
  ;; Launcher Example(s)
  ;;
  Endpoint to get a breakpoint into views when using manage.py
  (dap-debug
   (list :type "python"
         :args "runserver --noreload"
         :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/"
         :module nil
         :console "integratedTerminal"
         :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/manage.py"
         :request "launch"
         :name "Python: Django manage"
         :django t))
#+end_src

#+begin_src emacs-lisp :tangle no
  ;;
  ;; env vars do not work:
  ;; https://github.com/emacs-lsp/dap-mode/issues/202
  (dap-debug
   (list :type "python"
         :args "-s"
         :cwd "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/app/study/tests/"
         :environment-variables '(("FOO" . "BAR"))
         :module nil
         :console "integratedTerminal"
         :program "/home/audeering.local/cgeng/code/data_collection/aisoundlab/backend/test.py"
         :request "launch"
         :name "Python: Django run unit test file"
         :django t))
#+end_src

**** Linting, Checkers, Static Code Analysis - Hooks

Overview about formatting, organizing imports and style checkers:
- https://zhauniarovich.com/post/2020/2020-04-starting-new-python-project/
- https://www.reddit.com/r/Python/comments/8oqy03/blog_a_comparison_of_autopep8_black_and_yapf_code/

Usefuly Hooks Article: https://enzuru.medium.com/helpful-emacs-python-mode-hooks-especially-for-type-hinting-c4b70b9b2216

***** Linting

****** Linters
;; pylint: .pylintrc

- pyright
- python-flake8  https://flake8.pycqa.org/en/latest/
- python-pylint
- python-pycompile
- python-pyright
- python-mypy

pip install  --upgrade pylint
pip install  --upgrade flake8


***** Code Formatting

****** Formatting providers in vscode

https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0

-  file->preferences->type "python formatting provider"
-  This gets put into ~/cgeng/.config/Code/User/settings.json
 "python.formatting.provider": "black"
- file->preferences->type "format on save"

-  configure black
-  https://dev.to/adamlombard/vscode-setting-line-lengths-in-the-black-python-code-formatter-1g62
 file->preferences->type "python formatting black args"
- --line-length 119
- 119 characters

***** Pyright Code Checking


****** Django Problem
;; https://github.com/microsoft/pyright/issues/1359
;; Django Stubs: https://pypi.org/project/django-stubs/


;; flycheck
;; using pyright in emacs lsp as well as in vscode gives identical errors except
;; false errors in emacs that are flagged as "lsp-flycheck-info-unnecessary"
;; https://github.com/emacs-lsp/lsp-mode/issues/2255



;; Vergleich der standard-Autoformatters:
;; https://www.kevinpeters.net/auto-formatters-for-python

;; Emacs LSP-Ansatz:
;; jede Sprache macht es selbst, also kein allgemeines setup für lsp und dap:
;; https://alpha2phi.medium.com/emacs-lsp-and-dap-7c1786282324

;; Format Imports Isort -
;; formatting using black and isort
;; https://cereblanco.medium.com/setup-black-and-isort-in-vscode-514804590bf9

;; autoflake will also remove unused imports using pyflakes (which is what flake8 uses to check for extra imports
;;  flycheck-pyflakes  20170330.2311 available  melpa      Support pyflakes in flyc
;; pip install autoflake
;; importmagic
;;
;; yapf stanza example for setup.cfg
;;
;;
;; [yapf]
;; based_on_style = pep8
;; spaces_before_comment = 4
;; split_before_logical_operator = true
;; line-length = 119

;; lisp function to auto-remove unused imports:
;; https://gist.github.com/kracekumar/77d29c7410199fd2cda4

;; linting
;; https://code.visualstudio.com/docs/python/linting
;; https://github.com/emacs-lsp/lsp-mode/issues/1327







***** Type Hinting
;; https://stackoverflow.com/questions/44094494/can-pycharm-suggest-or-autocomplete-or-insert-type-hints/44102211#44102211

***** Code Coverage in Emacs

- roll your own  ;; https://blog.laurentcharignon.com/post/universal-code-coverage/
- On Elpa:  pycoverage https://github.com/mattharrison/pycoverage.el
- not on elpa: https://github.com/wbolster/emacs-python-coverage/blob/master/python-coverage.el

#+begin_example
;;  cov                            20210330.44    available    melpa    Show coverage stats in the fringe.
;;  coverage                       20191113.1958  available    melpa    Code coverage line highlighting
;;  coverlay                       20190414.940   available    melpa    Test coverage overlays
#+end_example

**** Pyright

***** Build Pyright

Pylance = Pyright + IntelliCode AI models (not open-source)

#+begin_src bash :tangle no
https://github.com/emacs-lsp/lsp-mode/issues/1863:
entweder über vs code installieren oder selbst bauen
git clone https://github.com/microsoft/pyright
cd pyright
npm i
npm run build:serverProd
;; das sorgt dafür dass pyright bei mir im Pfad ist
;; which pyright
;; momentan befindet sich das hier: /home/audeering.local/cgeng/.nvm/versions/node/v12.22.1/bin/pyright
#+end_src

***** Use VS Code Version

#+begin_src emacs-lisp :tangle no
;; Nutzung der VSCode Version:
;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
;; (setq lsp-pyright-server-cmd `("node" "~/pyright/client/server/server.bundle.js" "--stdio"))
#+end_src

Activating venvs:
After changing the virtual env, the lsp workspace has to be restarted:
see https://github.com/emacs-lsp/lsp-pyright/issues/7

#+begin_src emacs-lisp :tangle no
(lsp-restart-workspace)
#+end_src

***** Configuration

- Pyright LS uses a file called pyrightconfig.json to include settings
This is documented at https://github.com/microsoft/pyright/blob/main/docs/configuration.md
- This also statest that pyright settings can also be specified in a [tool.pyright] section of a "pyproject.toml" file.
- some of these settings are also
 https://blog.pilosus.org/posts/2019/12/26/python-third-party-tools-configuration/
-  https://github.com/emacs-lsp/lsp-pyright
- hoe to devise local adaptions to PYTHONPATH under Emacs lsp pyright?
- there is a custom variable:
- python.analysis.extraPaths via lsp-pyright-extra-paths

-  PYTHONPATH  Setting py-pythonpath as a .dir-local seems not to work https://github.com/porterjamesj/virtualenvwrapper.el/issues/56
- What works though is the customization of lsp-pyright-extra-paths
- All variables that are accessible through Emacs as defcustom are here:
  https://github.com/emacs-lsp/lsp-pyright

code/data_collection/aisoundlab/audb_covid_19/1.0.0/


***** pyrightconfig.json example

Not sure whehter emacs interprets this at all

#+begin_src json :tangle no
{
    "exclude": ["**/node_modules", "**/__pycache__"],
    "ignore": ["**/node_modules", "**/__pycache__"],
    "include": ["flextensor", "tvm","1.0.0"],
    "pythonPlatform": "Linux",
    "pythonVersion": "3.7",
    "reportMissingImports": true,
    "reportMissingTypeStubs": false,
    "stubPath": "typings",
    "typeCheckingMode": "basic",
    "venvPath": "/home/audeering.local/cgeng/.venvs",
    "venv": "py37"
}

#+end_src


#+begin_src bash :tangle no

#+end_src


#+begin_src bash :tangle no

#+end_src

*****


**** Writing setup-python.el file  the  conf
:PROPERTIES:
:ID:       e1a1988b-a70a-435c-98e3-d95c61522659
:END:

***** Header
:PROPERTIES:
:ID:       6644930c-c376-4981-ae63-fc57ab4f5122
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  ;;; setup-python.el --- summary -*- lexical-binding: t -*-
  ;;
  ;;; Code:

  (message "Lsp Python begins here")
#+end_src


***** Function to restart Worksüace
:PROPERTIES:
:ID:       41f1d2b5-4526-4261-aaaf-00525bd8034c
:END:

see http://ergoemacs.org/emacs/elisp_file_name_dir_name.html

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
    (defun lsp-workspace-restart-deep ()
    (interactive
    (delete-file (joindirs user-emacs-directory  ".lsp-session-v1"))
    (lsp-workspace-restart))
    )

  ;;   ;;;###autoload
  ;; (defun toggle-menubar ()
  ;; "Toggle menubar visibility.
  ;; If toolbar is invisible, turn it on.  Otherwise turn it off."
  ;;   (interactive)
  ;;   (if (eq menu-bar-mode t)
  ;;       (menu-bar-mode -1)
  ;;           (menu-bar-mode t)

  ;; ))



#+end_src

#+RESULTS:
: lsp-workspace-restart-deep

(load-file "~/.emacs.d/init.el")

#+RESULTS:
: lsp-workspace-restart-deep



***** Format buffer using yapf
:PROPERTIES:
:ID:       674e2989-94c8-4dbe-976a-64ad936aa62c
:END:

see https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-lsp.el

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes

  (defun python-yapf-format-buffer ()
     (interactive)
     (when (and (executable-find "yapf") buffer-file-name)
       (call-process "yapf" nil nil nil "-i" buffer-file-name)))

  ;; add hook example
  ;; (add-hook 'python-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'after-save-hook #'lsp-python-ms-format-buffer t t)))


#+end_src

***** Function to remove unused imports using autoflake
:PROPERTIES:
:ID:       5a5a162d-6b68-405d-9c47-02775e75271e
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  ;; does not work as custom variable
  ;; (defcustom python-autoflake-path
  ;;   (replace-regexp-in-string "\n$" "" (shell-command-to-string "which autoflake"))
  ;;   )

  (defvar python-autoflake-path
  (replace-regexp-in-string "\n$" "" (shell-command-to-string "which autoflake"))
  )

  (defun python-remove-unused-imports()
    "Use Autoflake to remove unused function"
    "autoflake --remove-all-unused-imports -i unused_imports.py"
    (interactive)
    (shell-command
     (format "%s --remove-all-unused-imports -i %s"
         python-autoflake-path
             (shell-quote-argument (buffer-file-name))))
    (revert-buffer t t t))
#+end_src

#+RESULTS:
: python-remove-unused-imports

***** Function to remove unused variables using autoflake
:PROPERTIES:
:ID:       9259bd8f-9cce-4f06-b262-d9f487959596
:END:

- this goes by using the --remove-unused-variables flag

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes


    (defun python-remove-unused-variables()
    "Use Autoflake to remove unused function"
    "autoflake --remove-all-unused-imports -i unused_imports.py"
    (interactive)
    (shell-command
     (format "%s --remove-unused-variables -i %s"
         python-autoflake-path
             (shell-quote-argument (buffer-file-name))))
    (revert-buffer t t t))

#+end_src

#+RESULTS:
: python-remove-unused-imports

***** Configure black formatter
:PROPERTIES:
:ID:       a7799b15-ad9f-4ab0-b55a-5ea7c6ef14e7
:END:

- blacken-buffer will format the buffer
- customizations are better kept in pyproject.toml, so the line length commneted out
- setup.cfg is interpreted by black

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package :ensure t)
  (use-package blacken
      :ensure t
      :ensure-system-package (black . "pip3 install black")
      ;; :custom
      ;; (blacken-line-length 119)
      )

#+end_src

***** Rst autocomplete
:PROPERTIES:
:ID:       59d7132f-71a6-45b0-88b8-a2f15e3952f2
:END:

https://github.com/tkf/auto-complete-rst

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes
  (require 'auto-complete-rst)
  (auto-complete-rst-init)

  ;; specify other sources to use in rst-mode
  (setq auto-complete-rst-other-sources
      '(ac-source-filename
        ac-source-abbrev
        ac-source-dictionary
        ac-source-yasnippet))
#+end_src



***** Main Conf Block
:PROPERTIES:
:ID:       028eb1d6-f3c4-40e1-8943-34a15fd269a9
:END:

#+begin_src emacs-lisp  :tangle ./el/setup-python.el :mkdirp yes

  (require 'linum)
  (require 'pycoverage)


  (defun my-coverage ()
    (interactive)
    (when (derived-mode-p 'python-mode)
      (progn
        (linum-mode)
        (pycoverage-mode))))

  (defconst python-linewidth 120)

  (use-package python-mode
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (require 'highlight-indent-guides)
                           (auto-fill-mode)
                           (set-fill-column python-linewidth)
                           ;;(highlight-indent-guides-mode)

                           (lsp-deferred)
                           ;; (yapf-mode)
                           (lsp-treemacs)
                           )
                       )
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    ;; should be .dir-local:
    ;; (lsp-pyright-venv-path "~/.venvs/py37")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python)
    ;; (setq lsp-pyright-server-cmd `("node" "~/.vscode/extensions/ms-python.vscode-pylance-2021.5.3/dist/pyright.bundle.js" "--stdio"))
    )


    (setq lsp-enable-file-watchers nil)
    (setq lsp-file-watch-threshold 2000)

    (setq lsp-pyright-auto-import-completions t)
    ;;  Determines whether pyright automatically adds common search paths.
    ;; i.e: Paths like "src" if there are no execution environments defined in the
    ;; config file.
    (setq lsp-pyright-auto-search-paths t)
    (setq lsp-pyright-log-level "trace")

  (require 'dap-python)

  ;; (lsp-client-settings)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    ;; :bind (:map company-active-map
    ;;        ("<tab>" . company-complete-selection))
    ;;       (:map lsp-mode-map
    ;;        ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package pyvenv
    :config
    (pyvenv-mode 1)
    ;; (setq pyvenv-workon "py37")  ; Default venv
    (pyvenv-tracking-mode 1)
    )  ; Automatically use pyvenv-workon via dir-locals

  (provide 'setup-python)

  ;;; setup-python-lsp-python ends here

#+end_src


#+begin_src emacs-lisp
  ;; not  lsp
  ;; (require 'setup-python-elpy-jedi)   ;; was the old setup-python.el
  ;; (require 'setup-python-lsp-emacs-from-scratch)
  ;; (require 'setup-python-pyright)
  ;; (require 'setup-python-lsp-pyright)
  ;; now: Alays write into setup-python and require so
  (require 'setup-python)
#+end_src

*** R
:PROPERTIES:
:ID:       f6b47430-8927-472c-99f9-dd3a7ce2cc4a
:END:

https://confunguido.github.io/blog/20190317_emacs_for_R.html
https://github.com/sejdemyr/.emacs.d/blob/master/init.el

#+begin_src emacs-lisp  :tangle ./el/setup-ess.el :mkdirp yes

  ;;; setup-ess.el --- summary -*- lexical-binding: t -*-
  ;;
  ;;; Code:

  (message "Lsp Python begins here")

        ;;; emacs speaks statistics
      (use-package ess
        :ensure t
        :init
        (require 'ess-site)
        )

  (provide 'setup-ess)
;;; setup-python-lsp-python ends here


#+end_src


*** LSP Other Languages
:PROPERTIES:
:ID:       3fff27c7-73a4-4dfa-833a-86903c2d8d0b
:END:



#+begin_src emacs-lisp

  (require 'setup-ess)
  (require 'setup-typescript)
  (require 'setup-angular)
  (require 'setup-c-lsp-clangd)
  ;; (require 'setup-c++)
  ;; (require 'setup-python-lsp-remember-you)

  (eval-after-load 'whitespace '(require 'setup-whitespace))
  (eval-after-load 'tramp '(require 'setup-tramp))
  ;; (require 'setup-perspective)
  ;; (require 'setup-ffip)
  ;; (require 'setup-paredit)

  (require 'mmm-auto)
  (mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

  (require 'setup-js2-mode)
  (require 'setup-web-mode)
  (require 'mmm-auto)
  (require 'setup-web-mode)
  (require 'setup-vue-mode)

  ;; (require 'setup-speedbar)

  ;; (eval-after-load 'sgml-mode '(require 'setup-html-mode))
  (eval-after-load 'lisp-mode '(require 'setup-lisp))

  (require 'setup-org) ;; organizer todo notes etc

  (require 'setup-plantuml) ;; organizer todo notes etc

  (require 'setup-latex)

  (require 'setup-calendar)
  ;;(require 'setup-bash)
  (require 'setup-octave)
  ;; (require 'mc)

  ;;(require 'setup-web-mode)
  (require 'setup-jabber)
  (require 'setup-chat-tracking)
  ;; (eval-after-load 'ruby-mode '(require 'setup-ruby-mode))
   (eval-after-load 'clojure-mode '(require 'setup-clojure-mode))
  ;; (eval-after-load 'markdown-mode '(require 'setup-markdown-mode))
  ;;(require 'setup-pandoc)

  ;; Load slime-js when asked for
  ;; (autoload 'slime-js-jack-in-browser "setup-slime-js" nil t)
  ;; (autoload 'slime-js-jack-in-node "setup-slime-js" nil t)

  ;; Map files to modes
  (require 'mode-mappings)


  ;; (require 'expand-region)
  ;; (require 'mark-more-like-this)
  ;; (require 'inline-string-rectangle)
  ;;(require 'multiple-cursors)
  ;; (require 'delsel)
  ;; (require 'jump-char)
  ;; (require 'eproject)
  ;; (require 'wgrep)
  ;; (require 'smart-forward)
  ;; (require 'change-inner)
  ;; (require 'multifiles)


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Ansi Farben in compilation buffers:                                                                  ;;
  ;; Also hook:                                                                                           ;;
  ;; https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode                       ;;
  ;; Als Function:                                                                                        ;;
  ;; https://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun display-ansi-colors ()
    (interactive)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
  ;; gehen alle nicht;
  ; (add-hook 'sbt-mode-hook 'display-ansi-colors)
  ;; (add-hook 'sbt-mode-hook 'ansi-color-for-comint-mode-on)
  ;; (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
  ;; (add-hook 'async-bytecomp-package-mode-hook 'colorize-compilation-buffer)

  ;; Fill column indicator
  ;; (require 'fill-column-indicator)

  ;; Browse kill ring
  (require 'browse-kill-ring)
  (setq browse-kill-ring-quit-action 'save-and-restore)

  ;; Smart M-x is smart - der ido fuer M-x
  (require 'smex)
  (smex-initialize)

  ;; Setup key bindings
  (require 'key-bindings)
  (require 'setup-helm)
  (require 'setup-ibuffer)
  (require 'setup-doom-modeline)

  ;; (require 'setup-eclim)
  ;; This currently breaks dired icons. Why?
  ;; (require 'setup-scala)
  (require 'setup-treemacs)
  (require 'setup-groovy)
  ;; (require 'setup-eclim)


  ;; Misc
  ;; (require 'appearance)
  ;; (require 'my-misc)

  ;; Diminish modeline clutter
  (require 'diminish)
  ;; (diminish 'eldoc-mode)
  ;; (diminish 'paredit-mode)

  ;; Elisp go-to-definition with M-. and back again with M-,
  ;; (autoload 'elisp-slime-nav-mode "elisp-slime-nav")
  ;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t) (eldoc-mode 1)))
  ;; (eval-after-load 'elisp-slime-nav '(diminish 'elisp-slime-nav-mode))

  ;; Email, baby
  ;; (require 'setup-mule)

  ;; Run at full power please
  (put 'downcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  ;; electric-pair-mode
  ;; geht nur in emacs 24 turn on automatic bracket insertion by pairs. New in emacs 24
  ;; see http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html
  (electric-pair-mode 1)

  (when (fboundp 'cycle-themes)
    (cycle-themes))

  (put 'scroll-left 'disabled nil)


    (setq abbrev-file-name             ;; tell emacs where to read abbrev
          "~/.emacs.d/abbrev_defs")    ;; definitions from...

  ;;(add-to-list 'load-path "/path/to/downloaded/openwith.el")
  ;;./elpa/openwith-20120531.1436/openwith.el:1

  ;; ("\\.pdf\\'"  "okular" (file))

  (require 'openwith)
  (setq openwith-associations '(
                                ("\\.mp4\\'"  "vlc" (file))
                                ("\\.docx\\'" "lowriter" (file))
                                ("\\.odt\\'"  "lowriter" (file))
                                ("\\.pptx\\'"  "loimpress" (file))
                                ))
  ;; unset associations altogether
  ;; (setq openwith-associations '())

  (openwith-mode)
  (display-battery-mode)
  (setq require-final-newline t)

  (require 'setup-nxml)
  ;; (require 'setup-pdf-tools)
  (require 'setup-json-mode)
  (require 'setup-magit)
  ;; (require 'setup-tags)

  (require 'setup-flycheck-mode)
  ;; company mode autocompletion
  ;;(add-hook 'after-init-hook 'global-company-mode)

  ;;(require 'pasc-mode)

  (require 'setup-yasnippet)

  (require 'setup-supercollider)
  (require 'setup-yaml-mode)
  (require 'setup-editorconfig)
  (require 'setup-rtags)
  (require 'setup-treemacs)

  (require 'setup-shell-scripting)

  (require 'calfw)
  (require 'calfw-gcal)
  (require 'calfw-org)
  (require 'calfw-gcal)
  (require 'calfw-ical)
  (require 'setup-user-menu)

  (put 'erase-buffer 'disabled nil)

  ;; fix misalignment in popus:
  (setq popup-use-optimized-column-computation nil)

  (add-hook 'makefile-mode-hook 'makefile-executor-mode)

#+end_src

**** Shell prompt


***** Recommendations
:PROPERTIES:
:ID:       ad5cc4be-3a56-4208-90e3-173b17837c02
:END:

https://stackoverflow.com/questions/12224909/is-there-a-way-to-get-my-emacs-to-recognize-my-bash-aliases-and-custom-functions/12229404#12229404

#+begin_src emacs-lisp :tangle no
;; ->  make  all  envs  visible in  also org mode
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")
#+end_src

- The solution is to leave the shell-command-switch variable at its default value, which is just -c.
https://emacs.stackexchange.com/questions/3447/cannot-set-terminal-process-group-error-when-running-bash-script

#+begin_src emacs-lisp
(setq shell-file-name "bash")
(setq shell-command-switch "-c")
#+end_src



**** safe local variables
:PROPERTIES:
:ID:       7a719b5d-aa8c-4110-9859-5aea715e044b
:END:

#+begin_src emacs-lisp

;; - '(safe-local-variable-values '((testvar\  . "hello")))
;; + '(safe-local-variable-values
;; +   '((pyvenv-activate . "~/.venvs/py37/")
;; +     (testvar\  . "hello")))
;;   '(sql-connection-alist
;;     '(("dataupload local container mysql"

;; (put 'pyvenv-activate 'safe-local-variable (lambda (_) t))

;; projectile-project-test-cmd :

(put 'pyvenv-activate 'safe-local-variable (lambda (_) t))
(put 'projectile-project-test-cmd 'safe-local-variable (lambda (_) t))
(put 'py-pythonpath  'safe-local-variable (lambda (_) t))


#+end_src


**** fix missing alt-key in WSL
:PROPERTIES:
:ID:       52d2df23-c894-4ce0-b82b-1023c29e4483
:END:

WSL for Windows specific code

#+begin_src emacs-lisp
(setq x-alt-keysym 'meta)
(put 'set-goal-column 'disabled nil)
#+end_src


** Misc
:PROPERTIES:
:ID:       d7d9d2b8-5c98-4fe9-bab5-d0c725bf3911
:END:

*** Defuns
:PROPERTIES:
:ID:       8ee4a7b9-f9e7-422e-8c04-3c17a61da460
:END:

#+begin_src emacs-lisp
(defun edit-current-file-as-root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))
#+end_src

*** Imenu auto
:PROPERTIES:
:ID:       820994eb-2700-428a-a80b-d5e0ede6299d
:END:
#+begin_src emacs-lisp

;; add Imenu whenever possible.
;; see https://www.emacswiki.org/emacs/ImenuMode for documentation
(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "Index") (error nil)))
 (add-hook 'font-lock-mode-hook 'try-to-add-imenu)

#+end_src


*** Visible Bell off
:PROPERTIES:
:ID:       4b5650ad-478a-4c5e-8120-c56375abf02a
:END:

:PROPERTIES:
:ID:       6d9c48b7-0c81-4a42-a7f0-dfe149934fb2
:END:
#+begin_src emacs-lisp
(setq visible-bell t)
;; ring-bell function not doing what its supposed to?
;; see https://www.emacswiki.org/emacs/AlarmBell
;; (defun ring-bell-function()
;;   "do not ring the bell when cursor has gone too far outside."
;;   (message "Went outside but not ringing the bell.")
;;     )
#+end_src

*** Auth Source

- https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Pass.org
- https://www.youtube.com/watch?v=nZ_T7Q49B8Y


(add-to-list 'auth-sources (joindirs org-directory "Notes.org.gpg")) ;; not parseable by authinfo
(find-file (joindirs org-directory "Notes.org.gpg"))



 (defun delete-nth (index seq)
   "Delete the INDEX th element of SEQ.
 Return result sequence, SEQ __is__ modified."
   (if (equal index 0)
       (progn
         (setcar seq (car (cdr seq)))
         (setcdr seq (cdr (cdr seq))))
     (setcdr (nthcdr (1- index) seq) (nthcdr (1+ index) seq))))

(delete-nth 0 auth-sources)

(add-to-list 'auth-sources (joindirs org-directory ".authinfo.gpg")) ;; not parseable
  (mapc 'message auth-sources)

(find-file (joindirs org-directory ".authinfo.gpg"))
(find-file (joindirs org-directory "Notes.org.gpg")) ;; no need to add to auth sources as not parseable
(auth-source-search :site "kaufland.de")
(auth-source-search :site "real.de")


#+begin_src emacs-lisp :tangle no :noweb yes
  (mapc 'message auth-sources)
#+end_src

#+RESULTS:
| ~/.authinfo | ~/.authinfo.gpg | ~/.netrc |

(auth-source-search :site  "arts-outdoors")
(auth-source-search :site  "arts-outdoors")

https://www.arts-outdoors.de

(auth-source-search :host "real.de")
(auth-source-search :machine "mailprovider.com")

(find-file (joindirs org-directory ".authinfo.gpg"))
(auth-source-forget-all-cached)
(find-file "~/.authinfo.gpg")
(mapc 'message auth-sources)

**** Generate Key

#+begin_example shell
gpg --full-generate-key
#+end_example

- use rsa
- size: 4096
- never expires
- Real Name
- Email
- PassPhrase

#+begin_src shell :tangle no :noweb yes :results output raw
  gpg --list-keys
  # these should be in
  ls -t ~/.gnupg/
#+end_src

#+RESULTS:
/home/christian/.gnupg/pubring.kbx
----------------------------------
pub   rsa4096 2021-08-21 [SC]
      B6791609BBC1CD7C000F17E75921C10409567BCA
uid           [ultimate] Christian Geng (my default key for storing encrypted passwords) <christian.c.geng@gmail.com>
sub   rsa4096 2021-08-21 [E]

trustdb.gpg
openpgp-revocs.d
pubring.kbx
private-keys-v1.d
pubring.kbx~

#+begin_src shell :tangle no :noweb yes :results output raw
# Check if gpg-agent is already running
grep gpg-agent
# If it's not running, you can start it up with this command:
gpg-connect-agent /bye
#+end_src

#+RESULTS:
22957



(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
        nil)))


*** Mac Specific
:PROPERTIES:
:ID:       7ef44450-4c70-4117-8a72-44d99a0138e3
:END:
#+begin_src emacs-lisp
;; Are we on a mac?
(setq is-mac (equal system-type 'darwin))
;; Setup environment variables from the user's shell.
(when is-mac (exec-path-from-shell-initialize))
;; (when is-mac (require 'mac))

#+end_src

*** calibredb
:PROPERTIES:
:ID:       632883c3-8739-4a79-bab9-87bc587dc8af
:END:


#+begin_src emacs-lisp

(require 'calibredb)
(setq calibredb-root-dir "/D/Calibre_Science/")
(setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))

    ;;(setq calibredb-root-dir "~/OneDrive/Doc/Calibre")
    ;;(setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))

#+end_src

#+RESULTS:
: /D/Calibre_Science/metadata.db



*** Ascidoctor

Link collection here:

https://www.emacswiki.org/emacs/AsciiDoc

**** Adoc Snippets

git@github.com:nicorikken/adoc-mode-yasnippet.git

see in snippets

**** open adoc files
:PROPERTIES:
:ID:       8ebfb281-87fd-49f7-b513-19a4c3b0b492
:END:

#+begin_src emacs-lisp
   (require 'adoc-mode)
  (add-to-list 'auto-mode-alist '("\.adoc$" . adoc-mode))
 ;;  (add-to-list adoc-mode '("\\.adoc\\'" . adoc-mode))
   (autoload 'adoc-mode "adoc-mode" nil t)
#+end_src

#+RESULTS:

**** adoc mode preview
:PROPERTIES:
:ID:       8f6ef9ec-ffa0-4e07-90c0-37f08216106a
:END:

#+begin_src emacs-lisp
  (defun rcd-command-output-from-input (program input &rest args)
    "Returns output from PROGRAM INPUT with optional ARGS"
    (let* ((output (with-temp-buffer
                     (insert input)
                     (apply #'call-process-region nil nil program t t nil args)
                     (buffer-string))))
      output))

  (defun rcd-asciidoctor (string &rest args)
    (interactive)
    "Returns plain text from Markdown by using pandoc"
    (apply 'rcd-command-output-from-input "asciidoctor" string "-" args))

  (defun rcd-asciidoctor-preview ()
    "Preview asciidoctor"
    (interactive)
    (let* ((output (rcd-asciidoctor (buffer-string)))
           (file (concat (or (getenv "TMPDIR") "/tmp/") "asciidoctor.html")))
      (with-temp-file file (insert output))
      (browse-url file)))

  ;; (global-set-key (kbd "C-c a") 'rcd-asciidoctor-preview)
#+end_src

*** Org ascidoc
:PROPERTIES:
:ID:       59738c74-4023-4a75-8180-a424222ba95e
:END:

Org ascidoc exporter
Repo is here: git clone git@github.com:yashi/org-asciidoc.git

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el/org-asciidoc")
  (require 'ox-asciidoc)
#+end_src

#+RESULTS:
: ox-asciidoc

*** Always load .local_configs as shell script
:PROPERTIES:
:ID:       7bdb08dc-a901-4bab-912b-50271f3f6f76
:END:
#+begin_src emacs-lisp
 (add-to-list 'auto-mode-alist '(".local_configs" . shell-script-mode))
#+end_src

** Emacs Server
:PROPERTIES:
:ID:       91011ca1-3a58-4d79-ba3a-21b27eb355b7
:END:

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+end_src



* Applications Config Example

** Some App
:PROPERTIES:
:ID:       216fa964-a617-4a95-b3f4-3bd82856d8b1
:END:

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src emacs-lisp :tangle no :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src

#+begin_src emacs-lisp :noweb yes

  ;;  value=<<the-value()>>
  (setq value <<the-value()>>)

#+end_src
